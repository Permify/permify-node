// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               unknown
// source: base/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import type { CallContext, CallOptions } from "nice-grpc-common";
import {
  Argument,
  Attribute,
  AttributeFilter,
  CheckResult,
  checkResultFromJSON,
  checkResultToJSON,
  Context,
  DataBundle,
  DataChanges,
  Entity,
  Entrance,
  Expand,
  Partials,
  RelationReference,
  SchemaDefinition as SchemaDefinition1,
  StringArrayValue,
  Subject,
  Tenant,
  Tuple,
  TupleFilter,
} from "./base";

export const protobufPackage = "base.v1";

/** PermissionCheckRequest is the request message for the Check method in the Permission service. */
export interface PermissionCheckRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionCheckRequestMetadata
    | undefined;
  /** Entity on which the permission needs to be checked, required. */
  entity:
    | Entity
    | undefined;
  /** Name of the permission or relation, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes. */
  permission: string;
  /** Subject for which the permission needs to be checked, required. */
  subject:
    | Subject
    | undefined;
  /** Context associated with this request. */
  context:
    | Context
    | undefined;
  /** Additional arguments associated with this request. */
  arguments: Argument[];
}

/** PermissionCheckRequestMetadata metadata for the PermissionCheckRequest. */
export interface PermissionCheckRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
  /** Depth of the check, must be greater than or equal to 3. */
  depth: number;
}

/** PermissionCheckResponse is the response message for the Check method in the Permission service. */
export interface PermissionCheckResponse {
  /** Result of the permission check. */
  can: CheckResult;
  /** Metadata associated with this response. */
  metadata: PermissionCheckResponseMetadata | undefined;
}

/** PermissionCheckResponseMetadata metadata for the PermissionCheckResponse. */
export interface PermissionCheckResponseMetadata {
  /** The count of the checks performed. */
  checkCount: number;
}

/** PermissionExpandRequest is the request message for the Expand method in the Permission service. */
export interface PermissionExpandRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionExpandRequestMetadata
    | undefined;
  /** Entity on which the permission needs to be expanded, required. */
  entity:
    | Entity
    | undefined;
  /** Name of the permission to be expanded, not required, must start with a letter and can include alphanumeric and underscore, max 64 bytes. */
  permission: string;
  /** Context associated with this request. */
  context:
    | Context
    | undefined;
  /** Additional arguments associated with this request. */
  arguments: Argument[];
}

/** PermissionExpandRequestMetadata metadata for the PermissionExpandRequest. */
export interface PermissionExpandRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
}

/** PermissionExpandResponse is the response message for the Expand method in the Permission service. */
export interface PermissionExpandResponse {
  /** Expansion tree. */
  tree: Expand | undefined;
}

/** PermissionLookupEntityRequest is the request message for the LookupEntity method in the Permission service. */
export interface PermissionLookupEntityRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionLookupEntityRequestMetadata
    | undefined;
  /** Type of the entity to lookup, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes. */
  entityType: string;
  /** Name of the permission to check, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes. */
  permission: string;
  /** Subject for which to check the permission, required. */
  subject:
    | Subject
    | undefined;
  /** Context associated with this request. */
  context:
    | Context
    | undefined;
  /**
   * Scope: A map that associates entity types with lists of identifiers. Each entry
   * helps filter requests by specifying which entities are relevant to the operation.
   */
  scope: { [key: string]: StringArrayValue };
  /**
   * page_size is the number of entities to be returned in the response.
   * The value should be between 1 and 100.
   */
  pageSize: number;
  /**
   * continuous_token is an optional parameter used for pagination.
   * It should be the value received in the previous response.
   */
  continuousToken: string;
}

export interface PermissionLookupEntityRequest_ScopeEntry {
  key: string;
  value: StringArrayValue | undefined;
}

/** PermissionLookupEntityRequestMetadata metadata for the PermissionLookupEntityRequest. */
export interface PermissionLookupEntityRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
  /** Depth of lookup, required, must be greater or equal to 3. */
  depth: number;
}

/** PermissionLookupEntityResponse is the response message for the LookupEntity method in the Permission service. */
export interface PermissionLookupEntityResponse {
  /** List of identifiers for entities that match the lookup. */
  entityIds: string[];
  /** continuous_token is a string that can be used to paginate and retrieve the next set of results. */
  continuousToken: string;
}

/** PermissionLookupEntityStreamResponse is the response message for the LookupEntityStream method in the Permission service. */
export interface PermissionLookupEntityStreamResponse {
  /** Identifier for an entity that matches the lookup. */
  entityId: string;
  /** continuous_token is a string that can be used to paginate and retrieve the next set of results. */
  continuousToken: string;
}

/** PermissionEntityFilterRequest is the request message for the LookupEntityStream method in the Permission service. */
export interface PermissionEntityFilterRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionEntityFilterRequestMetadata
    | undefined;
  /** Reference to the entity to filter. */
  entrance:
    | Entrance
    | undefined;
  /** Subject for which to check the permission. */
  subject:
    | Subject
    | undefined;
  /** Context associated with this request. */
  context:
    | Context
    | undefined;
  /**
   * Scope: A map that associates entity types with lists of identifiers. Each entry
   * helps filter requests by specifying which entities are relevant to the operation.
   */
  scope: { [key: string]: StringArrayValue };
  /**
   * cursor is an optional parameter used for pagination.
   * It should be the value received in the previous response.
   */
  cursor: string;
}

export interface PermissionEntityFilterRequest_ScopeEntry {
  key: string;
  value: StringArrayValue | undefined;
}

/** PermissionEntityFilterRequestMetadata metadata for the PermissionEntityFilterRequest. */
export interface PermissionEntityFilterRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
  /** Depth of lookup, required, must be greater or equal to 3. */
  depth: number;
}

/** PermissionLookupSubjectRequest is the request message for the LookupSubject method in the Permission service. */
export interface PermissionLookupSubjectRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionLookupSubjectRequestMetadata
    | undefined;
  /** Entity for which to check the permission, required. */
  entity:
    | Entity
    | undefined;
  /** Permission to be checked, can be a permission or relation. Required, and must match the pattern "^([a-zA-Z][a-zA-Z0-9_]{1,62}[a-zA-Z0-9])$", max 64 bytes. */
  permission: string;
  /** Reference to the subject to lookup. */
  subjectReference:
    | RelationReference
    | undefined;
  /** Context associated with this request. */
  context:
    | Context
    | undefined;
  /** Additional arguments associated with this request. */
  arguments: Argument[];
  /**
   * page_size is the number of subjects to be returned in the response.
   * The value should be between 1 and 100.
   */
  pageSize: number;
  /**
   * continuous_token is an optional parameter used for pagination.
   * It should be the value received in the previous response.
   */
  continuousToken: string;
}

/** PermissionLookupSubjectRequestMetadata metadata for the PermissionLookupSubjectRequest. */
export interface PermissionLookupSubjectRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
  /** Depth of the check, must be greater than or equal to 3. */
  depth: number;
}

/** PermissionLookupSubjectResponse is the response message for the LookupSubject method in the Permission service. */
export interface PermissionLookupSubjectResponse {
  /** List of identifiers for subjects that match the lookup. */
  subjectIds: string[];
  /** continuous_token is a string that can be used to paginate and retrieve the next set of results. */
  continuousToken: string;
}

/** PermissionSubjectPermissionRequest is the request message for the SubjectPermission method in the Permission service. */
export interface PermissionSubjectPermissionRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Metadata associated with this request, required. */
  metadata:
    | PermissionSubjectPermissionRequestMetadata
    | undefined;
  /** Entity for which to check the permission, required. */
  entity:
    | Entity
    | undefined;
  /** Subject for which to check the permission, required. */
  subject:
    | Subject
    | undefined;
  /** Context associated with this request. */
  context: Context | undefined;
}

/** PermissionSubjectPermissionRequestMetadata metadata for the PermissionSubjectPermissionRequest. */
export interface PermissionSubjectPermissionRequestMetadata {
  /** Version of the schema. */
  schemaVersion: string;
  /** Token associated with the snap. */
  snapToken: string;
  /** Whether to only check permissions. */
  onlyPermission: boolean;
  /** Depth of the check, must be greater than or equal to 3. */
  depth: number;
}

/** PermissionSubjectPermissionResponse is the response message for the SubjectPermission method in the Permission service. */
export interface PermissionSubjectPermissionResponse {
  /** Map of results for each permission check. */
  results: { [key: string]: CheckResult };
}

export interface PermissionSubjectPermissionResponse_ResultsEntry {
  key: string;
  value: CheckResult;
}

/**
 * WatchRequest is the request message for the Watch RPC. It contains the
 * details needed to establish a watch stream.
 */
export interface WatchRequest {
  /** Identifier of the tenant, required, and must match the pattern "[a-zA-Z0-9-,]+", max 64 bytes. */
  tenantId: string;
  /** Snap token to be used for watching. */
  snapToken: string;
}

/**
 * WatchResponse is the response message for the Watch RPC. It contains the
 * changes in the data that are being watched.
 */
export interface WatchResponse {
  /** Changes in the data. */
  changes: DataChanges | undefined;
}

/**
 * SchemaWriteRequest is the request message for the Write method in the Schema service.
 * It contains tenant_id and the schema to be written.
 */
export interface SchemaWriteRequest {
  /**
   * tenant_id is a string that identifies the tenant. It must match the pattern "[a-zA-Z0-9-,]+",
   * be a maximum of 64 bytes, and must not be empty.
   */
  tenantId: string;
  /** schema is the string representation of the schema to be written. */
  schema: string;
}

/**
 * SchemaWriteResponse is the response message for the Write method in the Schema service.
 * It returns the version of the written schema.
 */
export interface SchemaWriteResponse {
  /** schema_version is the string that identifies the version of the written schema. */
  schemaVersion: string;
}

/**
 * It contains the tenant_id to identify the tenant and metadata of the schema to be edited,
 * with the corresponding edits to various entities
 */
export interface SchemaPartialWriteRequest {
  /**
   * tenant_id is a string that identifies the tenant. It must match the pattern "[a-zA-Z0-9-,]+",
   * be a maximum of 64 bytes, and must not be empty.
   */
  tenantId: string;
  /** metadata is the additional information needed for the Partial Write request. */
  metadata:
    | SchemaPartialWriteRequestMetadata
    | undefined;
  /** Map of entity name with the values needed to be updated */
  partials: { [key: string]: Partials };
}

export interface SchemaPartialWriteRequest_PartialsEntry {
  key: string;
  value: Partials | undefined;
}

/**
 * SchemaPartialWriteRequestMetadata provides additional information for the Schema Partial Write request.
 * It contains schema_version to specify which version of the schema should be read.
 */
export interface SchemaPartialWriteRequestMetadata {
  /** schema_version is the string that identifies the version of the schema to be read. */
  schemaVersion: string;
}

/**
 * SchemaPartialWriteResponse is the response message for the Parietal Write method in the Schema service.
 * It returns the requested schema.
 */
export interface SchemaPartialWriteResponse {
  /** schema_version is the string that identifies the version of the written schema. */
  schemaVersion: string;
}

/**
 * SchemaReadRequest is the request message for the Read method in the Schema service.
 * It contains tenant_id and metadata about the schema to be read.
 */
export interface SchemaReadRequest {
  /**
   * tenant_id is a string that identifies the tenant. It must match the pattern "[a-zA-Z0-9-,]+",
   * be a maximum of 64 bytes, and must not be empty.
   */
  tenantId: string;
  /** metadata is the additional information needed for the Read request. */
  metadata: SchemaReadRequestMetadata | undefined;
}

/**
 * SchemaReadRequestMetadata provides additional information for the Schema Read request.
 * It contains schema_version to specify which version of the schema should be read.
 */
export interface SchemaReadRequestMetadata {
  /** schema_version is the string that identifies the version of the schema to be read. */
  schemaVersion: string;
}

/**
 * SchemaReadResponse is the response message for the Read method in the Schema service.
 * It returns the requested schema.
 */
export interface SchemaReadResponse {
  /** schema is the SchemaDefinition that represents the read schema. */
  schema: SchemaDefinition1 | undefined;
}

/**
 * SchemaListRequest is the request message for the List method in the Schema service.
 * It contains tenant_id for which the schemas are to be listed.
 */
export interface SchemaListRequest {
  /**
   * tenant_id is a string that identifies the tenant. It must match the pattern "[a-zA-Z0-9-,]+",
   * be a maximum of 64 bytes, and must not be empty.
   */
  tenantId: string;
  /**
   * page_size is the number of schemas to be returned in the response.
   * The value should be between 1 and 100.
   */
  pageSize: number;
  /**
   * continuous_token is an optional parameter used for pagination.
   * It should be the value received in the previous response.
   */
  continuousToken: string;
}

/**
 * SchemaListResponse is the response message for the List method in the Schema service.
 * It returns a paginated list of schemas
 */
export interface SchemaListResponse {
  /** head of the schemas is the latest version available for the tenant */
  head: string;
  /** list of schema versions with creation timestamps */
  schemas: SchemaList[];
  /** continuous_token is a string that can be used to paginate and retrieve the next set of results. */
  continuousToken: string;
}

/** SchemaList provides a list of schema versions with their corresponding creation timestamps */
export interface SchemaList {
  version: string;
  createdAt: string;
}

/**
 * DataWriteRequest defines the structure of a request for writing data.
 * It contains the necessary information such as tenant_id, metadata,
 * tuples and attributes for the write operation.
 */
export interface DataWriteRequest {
  /** tenant_id represents the unique identifier of the tenant for which data is written. */
  tenantId: string;
  /** metadata holds additional data related to the request. */
  metadata:
    | DataWriteRequestMetadata
    | undefined;
  /** tuples contains the list of tuples (entity-relation-entity triples) that need to be written. */
  tuples: Tuple[];
  /** attributes contains the list of attributes (entity-attribute-value triples) that need to be written. */
  attributes: Attribute[];
}

/**
 * DataWriteRequestMetadata defines the structure of metadata for a write request.
 * It includes the schema version of the data to be written.
 */
export interface DataWriteRequestMetadata {
  /** schema_version represents the version of the schema for the data being written. */
  schemaVersion: string;
}

/**
 * DataWriteResponse defines the structure of the response after writing data.
 * It contains the snap_token generated after the write operation.
 */
export interface DataWriteResponse {
  /** snap_token is the token generated after the data write operation, representing a snapshot of the data. */
  snapToken: string;
}

/** Represents a request to write relationship data. */
export interface RelationshipWriteRequest {
  /** Unique identifier for the tenant with specific constraints. */
  tenantId: string;
  /** Metadata for the request. It's required. */
  metadata:
    | RelationshipWriteRequestMetadata
    | undefined;
  /** List of tuples for the request. Must have between 1 and 100 items. */
  tuples: Tuple[];
}

/** RelationshipWriteRequestMetadata */
export interface RelationshipWriteRequestMetadata {
  schemaVersion: string;
}

/** RelationshipWriteResponse */
export interface RelationshipWriteResponse {
  snapToken: string;
}

/**
 * RelationshipReadRequest defines the structure of a request for reading relationships.
 * It contains the necessary information such as tenant_id, metadata, and filter for the read operation.
 */
export interface RelationshipReadRequest {
  /** tenant_id represents the unique identifier of the tenant for which relationships are read. */
  tenantId: string;
  /** metadata holds additional data related to the request. */
  metadata:
    | RelationshipReadRequestMetadata
    | undefined;
  /** filter is used to specify criteria for the data that needs to be read. */
  filter:
    | TupleFilter
    | undefined;
  /**
   * page_size specifies the number of results to return in a single page.
   * If more results are available, a continuous_token is included in the response.
   */
  pageSize: number;
  /** continuous_token is used in case of paginated reads to get the next page of results. */
  continuousToken: string;
}

/**
 * RelationshipReadRequestMetadata defines the structure of the metadata for a read request focused on relationships.
 * It includes the snap_token associated with a particular state of the database.
 */
export interface RelationshipReadRequestMetadata {
  /** snap_token represents a specific state or "snapshot" of the database. */
  snapToken: string;
}

/**
 * RelationshipReadResponse defines the structure of the response after reading relationships.
 * It includes the tuples representing the relationships and a continuous token for handling result pagination.
 */
export interface RelationshipReadResponse {
  /** tuples is a list of the relationships retrieved in the read operation, represented as entity-relation-entity triples. */
  tuples: Tuple[];
  /** continuous_token is used in the case of paginated reads to retrieve the next page of results. */
  continuousToken: string;
}

/**
 * AttributeReadRequest defines the structure of a request for reading attributes.
 * It includes the tenant_id, metadata, attribute filter, page size for pagination, and a continuous token for multi-page results.
 */
export interface AttributeReadRequest {
  /** tenant_id represents the unique identifier of the tenant from which the attributes are being read. */
  tenantId: string;
  /** metadata holds additional information related to the request. */
  metadata:
    | AttributeReadRequestMetadata
    | undefined;
  /** filter specifies the criteria used to select the attributes that should be returned. */
  filter:
    | AttributeFilter
    | undefined;
  /**
   * page_size specifies the number of results to return in a single page.
   * If more results are available, a continuous_token is included in the response.
   */
  pageSize: number;
  /** continuous_token is used in case of paginated reads to get the next page of results. */
  continuousToken: string;
}

/**
 * AttributeReadRequestMetadata defines the structure for the metadata of an attribute read request.
 * It includes the snap_token associated with a particular state of the database.
 */
export interface AttributeReadRequestMetadata {
  /** snap_token represents a specific state or "snapshot" of the database. */
  snapToken: string;
}

/**
 * AttributeReadResponse defines the structure of the response to an attribute read request.
 * It includes the attributes retrieved and a continuous token for handling result pagination.
 */
export interface AttributeReadResponse {
  /** attributes is a list of the attributes retrieved in the read operation. */
  attributes: Attribute[];
  /** continuous_token is used in the case of paginated reads to retrieve the next page of results. */
  continuousToken: string;
}

/**
 * DataDeleteRequest defines the structure of a request to delete data.
 * It includes the tenant_id and filters for selecting tuples and attributes to be deleted.
 */
export interface DataDeleteRequest {
  /** tenant_id represents the unique identifier of the tenant from which the data will be deleted. */
  tenantId: string;
  /** tuple_filter specifies the criteria used to select the tuples that should be deleted. */
  tupleFilter:
    | TupleFilter
    | undefined;
  /** attribute_filter specifies the criteria used to select the attributes that should be deleted. */
  attributeFilter: AttributeFilter | undefined;
}

/**
 * DataDeleteResponse defines the structure of the response to a data delete request.
 * It includes a snap_token representing the state of the database after the deletion.
 */
export interface DataDeleteResponse {
  /** snap_token represents the state of the database after the requested deletions. */
  snapToken: string;
}

/** RelationshipDeleteRequest */
export interface RelationshipDeleteRequest {
  tenantId: string;
  filter: TupleFilter | undefined;
}

/** RelationshipDeleteResponse */
export interface RelationshipDeleteResponse {
  snapToken: string;
}

/**
 * BundleRunRequest is used to request the execution of a bundle.
 * It includes tenant_id, the name of the bundle, and additional arguments for execution.
 */
export interface BundleRunRequest {
  tenantId: string;
  /** Name of the bundle to be executed. */
  name: string;
  /** Additional key-value pairs for execution arguments. */
  arguments: { [key: string]: string };
}

export interface BundleRunRequest_ArgumentsEntry {
  key: string;
  value: string;
}

/**
 * BundleRunResponse is the response for a BundleRunRequest.
 * It includes a snap_token, which may be used for tracking the execution or its results.
 */
export interface BundleRunResponse {
  snapToken: string;
}

/**
 * BundleWriteRequest is used to request the writing of a bundle.
 * It contains the tenant_id to identify the tenant and the Bundles object.
 */
export interface BundleWriteRequest {
  tenantId: string;
  /** Contains the bundle data to be written. */
  bundles: DataBundle[];
}

/**
 * BundleWriteResponse is the response for a BundleWriteRequest.
 * It includes a name which could be used as an identifier or acknowledgment.
 */
export interface BundleWriteResponse {
  /** Identifier or acknowledgment of the written bundle. */
  names: string[];
}

export interface BundleReadRequest {
  tenantId: string;
  name: string;
}

export interface BundleReadResponse {
  bundle: DataBundle | undefined;
}

/**
 * BundleDeleteRequest is used to request the deletion of a bundle.
 * It contains the tenant_id to specify the tenant and the name of the bundle to be deleted.
 */
export interface BundleDeleteRequest {
  tenantId: string;
  /** Name of the bundle to be deleted. */
  name: string;
}

export interface BundleDeleteResponse {
  name: string;
}

/** TenantCreateRequest is the message used for the request to create a tenant. */
export interface TenantCreateRequest {
  /** id is a unique identifier for the tenant. */
  id: string;
  /** name is the name of the tenant. */
  name: string;
}

/** TenantCreateResponse is the message returned from the request to create a tenant. */
export interface TenantCreateResponse {
  /** tenant is the created tenant information. */
  tenant: Tenant | undefined;
}

/** TenantDeleteRequest is the message used for the request to delete a tenant. */
export interface TenantDeleteRequest {
  /** id is the unique identifier of the tenant to be deleted. */
  id: string;
}

/** TenantDeleteResponse is the message returned from the request to delete a tenant. */
export interface TenantDeleteResponse {
  /** tenant is the tenant information that was deleted. */
  tenant: Tenant | undefined;
}

/** TenantListRequest is the message used for the request to list all tenants. */
export interface TenantListRequest {
  /**
   * page_size is the number of tenants to be returned in the response.
   * The value should be between 1 and 100.
   */
  pageSize: number;
  /**
   * continuous_token is an optional parameter used for pagination.
   * It should be the value received in the previous response.
   */
  continuousToken: string;
}

/** TenantListResponse is the message returned from the request to list all tenants. */
export interface TenantListResponse {
  /** tenants is a list of tenants. */
  tenants: Tenant[];
  /** continuous_token is a string that can be used to paginate and retrieve the next set of results. */
  continuousToken: string;
}

function createBasePermissionCheckRequest(): PermissionCheckRequest {
  return {
    tenantId: "",
    metadata: undefined,
    entity: undefined,
    permission: "",
    subject: undefined,
    context: undefined,
    arguments: [],
  };
}

export const PermissionCheckRequest: MessageFns<PermissionCheckRequest> = {
  encode(message: PermissionCheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionCheckRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(26).fork()).join();
    }
    if (message.permission !== "") {
      writer.uint32(34).string(message.permission);
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(42).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(50).fork()).join();
    }
    for (const v of message.arguments) {
      Argument.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionCheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionCheckRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permission = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subject = Subject.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.arguments.push(Argument.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionCheckRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? PermissionCheckRequestMetadata.fromJSON(object.metadata) : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => Argument.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PermissionCheckRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionCheckRequestMetadata.toJSON(message.metadata);
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    if (message.subject !== undefined) {
      obj.subject = Subject.toJSON(message.subject);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => Argument.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionCheckRequest>): PermissionCheckRequest {
    return PermissionCheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionCheckRequest>): PermissionCheckRequest {
    const message = createBasePermissionCheckRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionCheckRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.permission = object.permission ?? "";
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.arguments = object.arguments?.map((e) => Argument.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermissionCheckRequestMetadata(): PermissionCheckRequestMetadata {
  return { schemaVersion: "", snapToken: "", depth: 0 };
}

export const PermissionCheckRequestMetadata: MessageFns<PermissionCheckRequestMetadata> = {
  encode(message: PermissionCheckRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionCheckRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionCheckRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionCheckRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: PermissionCheckRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionCheckRequestMetadata>): PermissionCheckRequestMetadata {
    return PermissionCheckRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionCheckRequestMetadata>): PermissionCheckRequestMetadata {
    const message = createBasePermissionCheckRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasePermissionCheckResponse(): PermissionCheckResponse {
  return { can: 0, metadata: undefined };
}

export const PermissionCheckResponse: MessageFns<PermissionCheckResponse> = {
  encode(message: PermissionCheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.can !== 0) {
      writer.uint32(8).int32(message.can);
    }
    if (message.metadata !== undefined) {
      PermissionCheckResponseMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionCheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.can = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionCheckResponseMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionCheckResponse {
    return {
      can: isSet(object.can) ? checkResultFromJSON(object.can) : 0,
      metadata: isSet(object.metadata) ? PermissionCheckResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: PermissionCheckResponse): unknown {
    const obj: any = {};
    if (message.can !== 0) {
      obj.can = checkResultToJSON(message.can);
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionCheckResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionCheckResponse>): PermissionCheckResponse {
    return PermissionCheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionCheckResponse>): PermissionCheckResponse {
    const message = createBasePermissionCheckResponse();
    message.can = object.can ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionCheckResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBasePermissionCheckResponseMetadata(): PermissionCheckResponseMetadata {
  return { checkCount: 0 };
}

export const PermissionCheckResponseMetadata: MessageFns<PermissionCheckResponseMetadata> = {
  encode(message: PermissionCheckResponseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkCount !== 0) {
      writer.uint32(8).int32(message.checkCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionCheckResponseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionCheckResponseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.checkCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionCheckResponseMetadata {
    return { checkCount: isSet(object.check_count) ? globalThis.Number(object.check_count) : 0 };
  },

  toJSON(message: PermissionCheckResponseMetadata): unknown {
    const obj: any = {};
    if (message.checkCount !== 0) {
      obj.check_count = Math.round(message.checkCount);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionCheckResponseMetadata>): PermissionCheckResponseMetadata {
    return PermissionCheckResponseMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionCheckResponseMetadata>): PermissionCheckResponseMetadata {
    const message = createBasePermissionCheckResponseMetadata();
    message.checkCount = object.checkCount ?? 0;
    return message;
  },
};

function createBasePermissionExpandRequest(): PermissionExpandRequest {
  return { tenantId: "", metadata: undefined, entity: undefined, permission: "", context: undefined, arguments: [] };
}

export const PermissionExpandRequest: MessageFns<PermissionExpandRequest> = {
  encode(message: PermissionExpandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionExpandRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(26).fork()).join();
    }
    if (message.permission !== "") {
      writer.uint32(34).string(message.permission);
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(42).fork()).join();
    }
    for (const v of message.arguments) {
      Argument.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionExpandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionExpandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionExpandRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permission = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.arguments.push(Argument.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionExpandRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? PermissionExpandRequestMetadata.fromJSON(object.metadata) : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => Argument.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PermissionExpandRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionExpandRequestMetadata.toJSON(message.metadata);
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => Argument.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionExpandRequest>): PermissionExpandRequest {
    return PermissionExpandRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionExpandRequest>): PermissionExpandRequest {
    const message = createBasePermissionExpandRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionExpandRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.permission = object.permission ?? "";
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.arguments = object.arguments?.map((e) => Argument.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermissionExpandRequestMetadata(): PermissionExpandRequestMetadata {
  return { schemaVersion: "", snapToken: "" };
}

export const PermissionExpandRequestMetadata: MessageFns<PermissionExpandRequestMetadata> = {
  encode(message: PermissionExpandRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionExpandRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionExpandRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionExpandRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
    };
  },

  toJSON(message: PermissionExpandRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionExpandRequestMetadata>): PermissionExpandRequestMetadata {
    return PermissionExpandRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionExpandRequestMetadata>): PermissionExpandRequestMetadata {
    const message = createBasePermissionExpandRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBasePermissionExpandResponse(): PermissionExpandResponse {
  return { tree: undefined };
}

export const PermissionExpandResponse: MessageFns<PermissionExpandResponse> = {
  encode(message: PermissionExpandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tree !== undefined) {
      Expand.encode(message.tree, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionExpandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionExpandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tree = Expand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionExpandResponse {
    return { tree: isSet(object.tree) ? Expand.fromJSON(object.tree) : undefined };
  },

  toJSON(message: PermissionExpandResponse): unknown {
    const obj: any = {};
    if (message.tree !== undefined) {
      obj.tree = Expand.toJSON(message.tree);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionExpandResponse>): PermissionExpandResponse {
    return PermissionExpandResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionExpandResponse>): PermissionExpandResponse {
    const message = createBasePermissionExpandResponse();
    message.tree = (object.tree !== undefined && object.tree !== null) ? Expand.fromPartial(object.tree) : undefined;
    return message;
  },
};

function createBasePermissionLookupEntityRequest(): PermissionLookupEntityRequest {
  return {
    tenantId: "",
    metadata: undefined,
    entityType: "",
    permission: "",
    subject: undefined,
    context: undefined,
    scope: {},
    pageSize: 0,
    continuousToken: "",
  };
}

export const PermissionLookupEntityRequest: MessageFns<PermissionLookupEntityRequest> = {
  encode(message: PermissionLookupEntityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionLookupEntityRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entityType !== "") {
      writer.uint32(26).string(message.entityType);
    }
    if (message.permission !== "") {
      writer.uint32(34).string(message.permission);
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(42).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(50).fork()).join();
    }
    Object.entries(message.scope).forEach(([key, value]) => {
      PermissionLookupEntityRequest_ScopeEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.pageSize !== 0) {
      writer.uint32(64).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(74).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupEntityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupEntityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionLookupEntityRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entityType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permission = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subject = Subject.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = PermissionLookupEntityRequest_ScopeEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.scope[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupEntityRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? PermissionLookupEntityRequestMetadata.fromJSON(object.metadata) : undefined,
      entityType: isSet(object.entity_type) ? globalThis.String(object.entity_type) : "",
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      scope: isObject(object.scope)
        ? Object.entries(object.scope).reduce<{ [key: string]: StringArrayValue }>((acc, [key, value]) => {
          acc[key] = StringArrayValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: PermissionLookupEntityRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionLookupEntityRequestMetadata.toJSON(message.metadata);
    }
    if (message.entityType !== "") {
      obj.entity_type = message.entityType;
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    if (message.subject !== undefined) {
      obj.subject = Subject.toJSON(message.subject);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.scope) {
      const entries = Object.entries(message.scope);
      if (entries.length > 0) {
        obj.scope = {};
        entries.forEach(([k, v]) => {
          obj.scope[k] = StringArrayValue.toJSON(v);
        });
      }
    }
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupEntityRequest>): PermissionLookupEntityRequest {
    return PermissionLookupEntityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupEntityRequest>): PermissionLookupEntityRequest {
    const message = createBasePermissionLookupEntityRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionLookupEntityRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entityType = object.entityType ?? "";
    message.permission = object.permission ?? "";
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.scope = Object.entries(object.scope ?? {}).reduce<{ [key: string]: StringArrayValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = StringArrayValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBasePermissionLookupEntityRequest_ScopeEntry(): PermissionLookupEntityRequest_ScopeEntry {
  return { key: "", value: undefined };
}

export const PermissionLookupEntityRequest_ScopeEntry: MessageFns<PermissionLookupEntityRequest_ScopeEntry> = {
  encode(message: PermissionLookupEntityRequest_ScopeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      StringArrayValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupEntityRequest_ScopeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupEntityRequest_ScopeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = StringArrayValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupEntityRequest_ScopeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? StringArrayValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PermissionLookupEntityRequest_ScopeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = StringArrayValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupEntityRequest_ScopeEntry>): PermissionLookupEntityRequest_ScopeEntry {
    return PermissionLookupEntityRequest_ScopeEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupEntityRequest_ScopeEntry>): PermissionLookupEntityRequest_ScopeEntry {
    const message = createBasePermissionLookupEntityRequest_ScopeEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? StringArrayValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePermissionLookupEntityRequestMetadata(): PermissionLookupEntityRequestMetadata {
  return { schemaVersion: "", snapToken: "", depth: 0 };
}

export const PermissionLookupEntityRequestMetadata: MessageFns<PermissionLookupEntityRequestMetadata> = {
  encode(message: PermissionLookupEntityRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupEntityRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupEntityRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupEntityRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: PermissionLookupEntityRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupEntityRequestMetadata>): PermissionLookupEntityRequestMetadata {
    return PermissionLookupEntityRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupEntityRequestMetadata>): PermissionLookupEntityRequestMetadata {
    const message = createBasePermissionLookupEntityRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasePermissionLookupEntityResponse(): PermissionLookupEntityResponse {
  return { entityIds: [], continuousToken: "" };
}

export const PermissionLookupEntityResponse: MessageFns<PermissionLookupEntityResponse> = {
  encode(message: PermissionLookupEntityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entityIds) {
      writer.uint32(10).string(v!);
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupEntityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupEntityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entityIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupEntityResponse {
    return {
      entityIds: globalThis.Array.isArray(object?.entity_ids)
        ? object.entity_ids.map((e: any) => globalThis.String(e))
        : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: PermissionLookupEntityResponse): unknown {
    const obj: any = {};
    if (message.entityIds?.length) {
      obj.entity_ids = message.entityIds;
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupEntityResponse>): PermissionLookupEntityResponse {
    return PermissionLookupEntityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupEntityResponse>): PermissionLookupEntityResponse {
    const message = createBasePermissionLookupEntityResponse();
    message.entityIds = object.entityIds?.map((e) => e) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBasePermissionLookupEntityStreamResponse(): PermissionLookupEntityStreamResponse {
  return { entityId: "", continuousToken: "" };
}

export const PermissionLookupEntityStreamResponse: MessageFns<PermissionLookupEntityStreamResponse> = {
  encode(message: PermissionLookupEntityStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupEntityStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupEntityStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupEntityStreamResponse {
    return {
      entityId: isSet(object.entity_id) ? globalThis.String(object.entity_id) : "",
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: PermissionLookupEntityStreamResponse): unknown {
    const obj: any = {};
    if (message.entityId !== "") {
      obj.entity_id = message.entityId;
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupEntityStreamResponse>): PermissionLookupEntityStreamResponse {
    return PermissionLookupEntityStreamResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupEntityStreamResponse>): PermissionLookupEntityStreamResponse {
    const message = createBasePermissionLookupEntityStreamResponse();
    message.entityId = object.entityId ?? "";
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBasePermissionEntityFilterRequest(): PermissionEntityFilterRequest {
  return {
    tenantId: "",
    metadata: undefined,
    entrance: undefined,
    subject: undefined,
    context: undefined,
    scope: {},
    cursor: "",
  };
}

export const PermissionEntityFilterRequest: MessageFns<PermissionEntityFilterRequest> = {
  encode(message: PermissionEntityFilterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionEntityFilterRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entrance !== undefined) {
      Entrance.encode(message.entrance, writer.uint32(26).fork()).join();
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(34).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(42).fork()).join();
    }
    Object.entries(message.scope).forEach(([key, value]) => {
      PermissionEntityFilterRequest_ScopeEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.cursor !== "") {
      writer.uint32(58).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionEntityFilterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionEntityFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionEntityFilterRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entrance = Entrance.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subject = Subject.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = PermissionEntityFilterRequest_ScopeEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.scope[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionEntityFilterRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? PermissionEntityFilterRequestMetadata.fromJSON(object.metadata) : undefined,
      entrance: isSet(object.entrance) ? Entrance.fromJSON(object.entrance) : undefined,
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      scope: isObject(object.scope)
        ? Object.entries(object.scope).reduce<{ [key: string]: StringArrayValue }>((acc, [key, value]) => {
          acc[key] = StringArrayValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: PermissionEntityFilterRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionEntityFilterRequestMetadata.toJSON(message.metadata);
    }
    if (message.entrance !== undefined) {
      obj.entrance = Entrance.toJSON(message.entrance);
    }
    if (message.subject !== undefined) {
      obj.subject = Subject.toJSON(message.subject);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.scope) {
      const entries = Object.entries(message.scope);
      if (entries.length > 0) {
        obj.scope = {};
        entries.forEach(([k, v]) => {
          obj.scope[k] = StringArrayValue.toJSON(v);
        });
      }
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionEntityFilterRequest>): PermissionEntityFilterRequest {
    return PermissionEntityFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionEntityFilterRequest>): PermissionEntityFilterRequest {
    const message = createBasePermissionEntityFilterRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionEntityFilterRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entrance = (object.entrance !== undefined && object.entrance !== null)
      ? Entrance.fromPartial(object.entrance)
      : undefined;
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.scope = Object.entries(object.scope ?? {}).reduce<{ [key: string]: StringArrayValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = StringArrayValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBasePermissionEntityFilterRequest_ScopeEntry(): PermissionEntityFilterRequest_ScopeEntry {
  return { key: "", value: undefined };
}

export const PermissionEntityFilterRequest_ScopeEntry: MessageFns<PermissionEntityFilterRequest_ScopeEntry> = {
  encode(message: PermissionEntityFilterRequest_ScopeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      StringArrayValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionEntityFilterRequest_ScopeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionEntityFilterRequest_ScopeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = StringArrayValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionEntityFilterRequest_ScopeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? StringArrayValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PermissionEntityFilterRequest_ScopeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = StringArrayValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionEntityFilterRequest_ScopeEntry>): PermissionEntityFilterRequest_ScopeEntry {
    return PermissionEntityFilterRequest_ScopeEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionEntityFilterRequest_ScopeEntry>): PermissionEntityFilterRequest_ScopeEntry {
    const message = createBasePermissionEntityFilterRequest_ScopeEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? StringArrayValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePermissionEntityFilterRequestMetadata(): PermissionEntityFilterRequestMetadata {
  return { schemaVersion: "", snapToken: "", depth: 0 };
}

export const PermissionEntityFilterRequestMetadata: MessageFns<PermissionEntityFilterRequestMetadata> = {
  encode(message: PermissionEntityFilterRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionEntityFilterRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionEntityFilterRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionEntityFilterRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: PermissionEntityFilterRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionEntityFilterRequestMetadata>): PermissionEntityFilterRequestMetadata {
    return PermissionEntityFilterRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionEntityFilterRequestMetadata>): PermissionEntityFilterRequestMetadata {
    const message = createBasePermissionEntityFilterRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasePermissionLookupSubjectRequest(): PermissionLookupSubjectRequest {
  return {
    tenantId: "",
    metadata: undefined,
    entity: undefined,
    permission: "",
    subjectReference: undefined,
    context: undefined,
    arguments: [],
    pageSize: 0,
    continuousToken: "",
  };
}

export const PermissionLookupSubjectRequest: MessageFns<PermissionLookupSubjectRequest> = {
  encode(message: PermissionLookupSubjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionLookupSubjectRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(26).fork()).join();
    }
    if (message.permission !== "") {
      writer.uint32(34).string(message.permission);
    }
    if (message.subjectReference !== undefined) {
      RelationReference.encode(message.subjectReference, writer.uint32(42).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(50).fork()).join();
    }
    for (const v of message.arguments) {
      Argument.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(64).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(74).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupSubjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupSubjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionLookupSubjectRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permission = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subjectReference = RelationReference.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.arguments.push(Argument.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupSubjectRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? PermissionLookupSubjectRequestMetadata.fromJSON(object.metadata) : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
      subjectReference: isSet(object.subject_reference)
        ? RelationReference.fromJSON(object.subject_reference)
        : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => Argument.fromJSON(e))
        : [],
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: PermissionLookupSubjectRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionLookupSubjectRequestMetadata.toJSON(message.metadata);
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    if (message.subjectReference !== undefined) {
      obj.subject_reference = RelationReference.toJSON(message.subjectReference);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => Argument.toJSON(e));
    }
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupSubjectRequest>): PermissionLookupSubjectRequest {
    return PermissionLookupSubjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupSubjectRequest>): PermissionLookupSubjectRequest {
    const message = createBasePermissionLookupSubjectRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionLookupSubjectRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.permission = object.permission ?? "";
    message.subjectReference = (object.subjectReference !== undefined && object.subjectReference !== null)
      ? RelationReference.fromPartial(object.subjectReference)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.arguments = object.arguments?.map((e) => Argument.fromPartial(e)) || [];
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBasePermissionLookupSubjectRequestMetadata(): PermissionLookupSubjectRequestMetadata {
  return { schemaVersion: "", snapToken: "", depth: 0 };
}

export const PermissionLookupSubjectRequestMetadata: MessageFns<PermissionLookupSubjectRequestMetadata> = {
  encode(message: PermissionLookupSubjectRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupSubjectRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupSubjectRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupSubjectRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: PermissionLookupSubjectRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupSubjectRequestMetadata>): PermissionLookupSubjectRequestMetadata {
    return PermissionLookupSubjectRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupSubjectRequestMetadata>): PermissionLookupSubjectRequestMetadata {
    const message = createBasePermissionLookupSubjectRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasePermissionLookupSubjectResponse(): PermissionLookupSubjectResponse {
  return { subjectIds: [], continuousToken: "" };
}

export const PermissionLookupSubjectResponse: MessageFns<PermissionLookupSubjectResponse> = {
  encode(message: PermissionLookupSubjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.subjectIds) {
      writer.uint32(10).string(v!);
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionLookupSubjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionLookupSubjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subjectIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionLookupSubjectResponse {
    return {
      subjectIds: globalThis.Array.isArray(object?.subject_ids)
        ? object.subject_ids.map((e: any) => globalThis.String(e))
        : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: PermissionLookupSubjectResponse): unknown {
    const obj: any = {};
    if (message.subjectIds?.length) {
      obj.subject_ids = message.subjectIds;
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionLookupSubjectResponse>): PermissionLookupSubjectResponse {
    return PermissionLookupSubjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionLookupSubjectResponse>): PermissionLookupSubjectResponse {
    const message = createBasePermissionLookupSubjectResponse();
    message.subjectIds = object.subjectIds?.map((e) => e) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBasePermissionSubjectPermissionRequest(): PermissionSubjectPermissionRequest {
  return { tenantId: "", metadata: undefined, entity: undefined, subject: undefined, context: undefined };
}

export const PermissionSubjectPermissionRequest: MessageFns<PermissionSubjectPermissionRequest> = {
  encode(message: PermissionSubjectPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      PermissionSubjectPermissionRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(26).fork()).join();
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(34).fork()).join();
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionSubjectPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSubjectPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = PermissionSubjectPermissionRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subject = Subject.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSubjectPermissionRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata)
        ? PermissionSubjectPermissionRequestMetadata.fromJSON(object.metadata)
        : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
    };
  },

  toJSON(message: PermissionSubjectPermissionRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = PermissionSubjectPermissionRequestMetadata.toJSON(message.metadata);
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.subject !== undefined) {
      obj.subject = Subject.toJSON(message.subject);
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionSubjectPermissionRequest>): PermissionSubjectPermissionRequest {
    return PermissionSubjectPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionSubjectPermissionRequest>): PermissionSubjectPermissionRequest {
    const message = createBasePermissionSubjectPermissionRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? PermissionSubjectPermissionRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBasePermissionSubjectPermissionRequestMetadata(): PermissionSubjectPermissionRequestMetadata {
  return { schemaVersion: "", snapToken: "", onlyPermission: false, depth: 0 };
}

export const PermissionSubjectPermissionRequestMetadata: MessageFns<PermissionSubjectPermissionRequestMetadata> = {
  encode(message: PermissionSubjectPermissionRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    if (message.onlyPermission !== false) {
      writer.uint32(24).bool(message.onlyPermission);
    }
    if (message.depth !== 0) {
      writer.uint32(32).int32(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionSubjectPermissionRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSubjectPermissionRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.onlyPermission = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSubjectPermissionRequestMetadata {
    return {
      schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
      onlyPermission: isSet(object.only_permission) ? globalThis.Boolean(object.only_permission) : false,
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: PermissionSubjectPermissionRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    if (message.onlyPermission !== false) {
      obj.only_permission = message.onlyPermission;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionSubjectPermissionRequestMetadata>): PermissionSubjectPermissionRequestMetadata {
    return PermissionSubjectPermissionRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<PermissionSubjectPermissionRequestMetadata>,
  ): PermissionSubjectPermissionRequestMetadata {
    const message = createBasePermissionSubjectPermissionRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    message.snapToken = object.snapToken ?? "";
    message.onlyPermission = object.onlyPermission ?? false;
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasePermissionSubjectPermissionResponse(): PermissionSubjectPermissionResponse {
  return { results: {} };
}

export const PermissionSubjectPermissionResponse: MessageFns<PermissionSubjectPermissionResponse> = {
  encode(message: PermissionSubjectPermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.results).forEach(([key, value]) => {
      PermissionSubjectPermissionResponse_ResultsEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionSubjectPermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSubjectPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = PermissionSubjectPermissionResponse_ResultsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.results[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSubjectPermissionResponse {
    return {
      results: isObject(object.results)
        ? Object.entries(object.results).reduce<{ [key: string]: CheckResult }>((acc, [key, value]) => {
          acc[key] = checkResultFromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PermissionSubjectPermissionResponse): unknown {
    const obj: any = {};
    if (message.results) {
      const entries = Object.entries(message.results);
      if (entries.length > 0) {
        obj.results = {};
        entries.forEach(([k, v]) => {
          obj.results[k] = checkResultToJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionSubjectPermissionResponse>): PermissionSubjectPermissionResponse {
    return PermissionSubjectPermissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionSubjectPermissionResponse>): PermissionSubjectPermissionResponse {
    const message = createBasePermissionSubjectPermissionResponse();
    message.results = Object.entries(object.results ?? {}).reduce<{ [key: string]: CheckResult }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value as CheckResult;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBasePermissionSubjectPermissionResponse_ResultsEntry(): PermissionSubjectPermissionResponse_ResultsEntry {
  return { key: "", value: 0 };
}

export const PermissionSubjectPermissionResponse_ResultsEntry: MessageFns<
  PermissionSubjectPermissionResponse_ResultsEntry
> = {
  encode(
    message: PermissionSubjectPermissionResponse_ResultsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionSubjectPermissionResponse_ResultsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSubjectPermissionResponse_ResultsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSubjectPermissionResponse_ResultsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? checkResultFromJSON(object.value) : 0,
    };
  },

  toJSON(message: PermissionSubjectPermissionResponse_ResultsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = checkResultToJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<PermissionSubjectPermissionResponse_ResultsEntry>,
  ): PermissionSubjectPermissionResponse_ResultsEntry {
    return PermissionSubjectPermissionResponse_ResultsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<PermissionSubjectPermissionResponse_ResultsEntry>,
  ): PermissionSubjectPermissionResponse_ResultsEntry {
    const message = createBasePermissionSubjectPermissionResponse_ResultsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWatchRequest(): WatchRequest {
  return { tenantId: "", snapToken: "" };
}

export const WatchRequest: MessageFns<WatchRequest> = {
  encode(message: WatchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.snapToken !== "") {
      writer.uint32(18).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "",
    };
  },

  toJSON(message: WatchRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<WatchRequest>): WatchRequest {
    return WatchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WatchRequest>): WatchRequest {
    const message = createBaseWatchRequest();
    message.tenantId = object.tenantId ?? "";
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseWatchResponse(): WatchResponse {
  return { changes: undefined };
}

export const WatchResponse: MessageFns<WatchResponse> = {
  encode(message: WatchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.changes !== undefined) {
      DataChanges.encode(message.changes, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.changes = DataChanges.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchResponse {
    return { changes: isSet(object.changes) ? DataChanges.fromJSON(object.changes) : undefined };
  },

  toJSON(message: WatchResponse): unknown {
    const obj: any = {};
    if (message.changes !== undefined) {
      obj.changes = DataChanges.toJSON(message.changes);
    }
    return obj;
  },

  create(base?: DeepPartial<WatchResponse>): WatchResponse {
    return WatchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WatchResponse>): WatchResponse {
    const message = createBaseWatchResponse();
    message.changes = (object.changes !== undefined && object.changes !== null)
      ? DataChanges.fromPartial(object.changes)
      : undefined;
    return message;
  },
};

function createBaseSchemaWriteRequest(): SchemaWriteRequest {
  return { tenantId: "", schema: "" };
}

export const SchemaWriteRequest: MessageFns<SchemaWriteRequest> = {
  encode(message: SchemaWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.schema !== "") {
      writer.uint32(18).string(message.schema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaWriteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
    };
  },

  toJSON(message: SchemaWriteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaWriteRequest>): SchemaWriteRequest {
    return SchemaWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaWriteRequest>): SchemaWriteRequest {
    const message = createBaseSchemaWriteRequest();
    message.tenantId = object.tenantId ?? "";
    message.schema = object.schema ?? "";
    return message;
  },
};

function createBaseSchemaWriteResponse(): SchemaWriteResponse {
  return { schemaVersion: "" };
}

export const SchemaWriteResponse: MessageFns<SchemaWriteResponse> = {
  encode(message: SchemaWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaWriteResponse {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: SchemaWriteResponse): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaWriteResponse>): SchemaWriteResponse {
    return SchemaWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaWriteResponse>): SchemaWriteResponse {
    const message = createBaseSchemaWriteResponse();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseSchemaPartialWriteRequest(): SchemaPartialWriteRequest {
  return { tenantId: "", metadata: undefined, partials: {} };
}

export const SchemaPartialWriteRequest: MessageFns<SchemaPartialWriteRequest> = {
  encode(message: SchemaPartialWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      SchemaPartialWriteRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    Object.entries(message.partials).forEach(([key, value]) => {
      SchemaPartialWriteRequest_PartialsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaPartialWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaPartialWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = SchemaPartialWriteRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = SchemaPartialWriteRequest_PartialsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.partials[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaPartialWriteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? SchemaPartialWriteRequestMetadata.fromJSON(object.metadata) : undefined,
      partials: isObject(object.partials)
        ? Object.entries(object.partials).reduce<{ [key: string]: Partials }>((acc, [key, value]) => {
          acc[key] = Partials.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SchemaPartialWriteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = SchemaPartialWriteRequestMetadata.toJSON(message.metadata);
    }
    if (message.partials) {
      const entries = Object.entries(message.partials);
      if (entries.length > 0) {
        obj.partials = {};
        entries.forEach(([k, v]) => {
          obj.partials[k] = Partials.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaPartialWriteRequest>): SchemaPartialWriteRequest {
    return SchemaPartialWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaPartialWriteRequest>): SchemaPartialWriteRequest {
    const message = createBaseSchemaPartialWriteRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? SchemaPartialWriteRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.partials = Object.entries(object.partials ?? {}).reduce<{ [key: string]: Partials }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Partials.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSchemaPartialWriteRequest_PartialsEntry(): SchemaPartialWriteRequest_PartialsEntry {
  return { key: "", value: undefined };
}

export const SchemaPartialWriteRequest_PartialsEntry: MessageFns<SchemaPartialWriteRequest_PartialsEntry> = {
  encode(message: SchemaPartialWriteRequest_PartialsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Partials.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaPartialWriteRequest_PartialsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaPartialWriteRequest_PartialsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Partials.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaPartialWriteRequest_PartialsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Partials.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SchemaPartialWriteRequest_PartialsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Partials.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaPartialWriteRequest_PartialsEntry>): SchemaPartialWriteRequest_PartialsEntry {
    return SchemaPartialWriteRequest_PartialsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaPartialWriteRequest_PartialsEntry>): SchemaPartialWriteRequest_PartialsEntry {
    const message = createBaseSchemaPartialWriteRequest_PartialsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Partials.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSchemaPartialWriteRequestMetadata(): SchemaPartialWriteRequestMetadata {
  return { schemaVersion: "" };
}

export const SchemaPartialWriteRequestMetadata: MessageFns<SchemaPartialWriteRequestMetadata> = {
  encode(message: SchemaPartialWriteRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaPartialWriteRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaPartialWriteRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaPartialWriteRequestMetadata {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: SchemaPartialWriteRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaPartialWriteRequestMetadata>): SchemaPartialWriteRequestMetadata {
    return SchemaPartialWriteRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaPartialWriteRequestMetadata>): SchemaPartialWriteRequestMetadata {
    const message = createBaseSchemaPartialWriteRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseSchemaPartialWriteResponse(): SchemaPartialWriteResponse {
  return { schemaVersion: "" };
}

export const SchemaPartialWriteResponse: MessageFns<SchemaPartialWriteResponse> = {
  encode(message: SchemaPartialWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaPartialWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaPartialWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaPartialWriteResponse {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: SchemaPartialWriteResponse): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaPartialWriteResponse>): SchemaPartialWriteResponse {
    return SchemaPartialWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaPartialWriteResponse>): SchemaPartialWriteResponse {
    const message = createBaseSchemaPartialWriteResponse();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseSchemaReadRequest(): SchemaReadRequest {
  return { tenantId: "", metadata: undefined };
}

export const SchemaReadRequest: MessageFns<SchemaReadRequest> = {
  encode(message: SchemaReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      SchemaReadRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = SchemaReadRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaReadRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? SchemaReadRequestMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SchemaReadRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = SchemaReadRequestMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaReadRequest>): SchemaReadRequest {
    return SchemaReadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaReadRequest>): SchemaReadRequest {
    const message = createBaseSchemaReadRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? SchemaReadRequestMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSchemaReadRequestMetadata(): SchemaReadRequestMetadata {
  return { schemaVersion: "" };
}

export const SchemaReadRequestMetadata: MessageFns<SchemaReadRequestMetadata> = {
  encode(message: SchemaReadRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaReadRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaReadRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaReadRequestMetadata {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: SchemaReadRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaReadRequestMetadata>): SchemaReadRequestMetadata {
    return SchemaReadRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaReadRequestMetadata>): SchemaReadRequestMetadata {
    const message = createBaseSchemaReadRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseSchemaReadResponse(): SchemaReadResponse {
  return { schema: undefined };
}

export const SchemaReadResponse: MessageFns<SchemaReadResponse> = {
  encode(message: SchemaReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schema !== undefined) {
      SchemaDefinition1.encode(message.schema, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schema = SchemaDefinition1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaReadResponse {
    return { schema: isSet(object.schema) ? SchemaDefinition1.fromJSON(object.schema) : undefined };
  },

  toJSON(message: SchemaReadResponse): unknown {
    const obj: any = {};
    if (message.schema !== undefined) {
      obj.schema = SchemaDefinition1.toJSON(message.schema);
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaReadResponse>): SchemaReadResponse {
    return SchemaReadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaReadResponse>): SchemaReadResponse {
    const message = createBaseSchemaReadResponse();
    message.schema = (object.schema !== undefined && object.schema !== null)
      ? SchemaDefinition1.fromPartial(object.schema)
      : undefined;
    return message;
  },
};

function createBaseSchemaListRequest(): SchemaListRequest {
  return { tenantId: "", pageSize: 0, continuousToken: "" };
}

export const SchemaListRequest: MessageFns<SchemaListRequest> = {
  encode(message: SchemaListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(26).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaListRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: SchemaListRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaListRequest>): SchemaListRequest {
    return SchemaListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaListRequest>): SchemaListRequest {
    const message = createBaseSchemaListRequest();
    message.tenantId = object.tenantId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseSchemaListResponse(): SchemaListResponse {
  return { head: "", schemas: [], continuousToken: "" };
}

export const SchemaListResponse: MessageFns<SchemaListResponse> = {
  encode(message: SchemaListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== "") {
      writer.uint32(10).string(message.head);
    }
    for (const v of message.schemas) {
      SchemaList.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.continuousToken !== "") {
      writer.uint32(26).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schemas.push(SchemaList.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaListResponse {
    return {
      head: isSet(object.head) ? globalThis.String(object.head) : "",
      schemas: globalThis.Array.isArray(object?.schemas) ? object.schemas.map((e: any) => SchemaList.fromJSON(e)) : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: SchemaListResponse): unknown {
    const obj: any = {};
    if (message.head !== "") {
      obj.head = message.head;
    }
    if (message.schemas?.length) {
      obj.schemas = message.schemas.map((e) => SchemaList.toJSON(e));
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaListResponse>): SchemaListResponse {
    return SchemaListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaListResponse>): SchemaListResponse {
    const message = createBaseSchemaListResponse();
    message.head = object.head ?? "";
    message.schemas = object.schemas?.map((e) => SchemaList.fromPartial(e)) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseSchemaList(): SchemaList {
  return { version: "", createdAt: "" };
}

export const SchemaList: MessageFns<SchemaList> = {
  encode(message: SchemaList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.createdAt !== "") {
      writer.uint32(18).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaList {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      createdAt: isSet(object.created_at) ? globalThis.String(object.created_at) : "",
    };
  },

  toJSON(message: SchemaList): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.createdAt !== "") {
      obj.created_at = message.createdAt;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaList>): SchemaList {
    return SchemaList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaList>): SchemaList {
    const message = createBaseSchemaList();
    message.version = object.version ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseDataWriteRequest(): DataWriteRequest {
  return { tenantId: "", metadata: undefined, tuples: [], attributes: [] };
}

export const DataWriteRequest: MessageFns<DataWriteRequest> = {
  encode(message: DataWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      DataWriteRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    for (const v of message.tuples) {
      Tuple.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = DataWriteRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tuples.push(Tuple.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataWriteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? DataWriteRequestMetadata.fromJSON(object.metadata) : undefined,
      tuples: globalThis.Array.isArray(object?.tuples) ? object.tuples.map((e: any) => Tuple.fromJSON(e)) : [],
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataWriteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = DataWriteRequestMetadata.toJSON(message.metadata);
    }
    if (message.tuples?.length) {
      obj.tuples = message.tuples.map((e) => Tuple.toJSON(e));
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DataWriteRequest>): DataWriteRequest {
    return DataWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataWriteRequest>): DataWriteRequest {
    const message = createBaseDataWriteRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? DataWriteRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.tuples = object.tuples?.map((e) => Tuple.fromPartial(e)) || [];
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataWriteRequestMetadata(): DataWriteRequestMetadata {
  return { schemaVersion: "" };
}

export const DataWriteRequestMetadata: MessageFns<DataWriteRequestMetadata> = {
  encode(message: DataWriteRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataWriteRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataWriteRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataWriteRequestMetadata {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: DataWriteRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<DataWriteRequestMetadata>): DataWriteRequestMetadata {
    return DataWriteRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataWriteRequestMetadata>): DataWriteRequestMetadata {
    const message = createBaseDataWriteRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseDataWriteResponse(): DataWriteResponse {
  return { snapToken: "" };
}

export const DataWriteResponse: MessageFns<DataWriteResponse> = {
  encode(message: DataWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataWriteResponse {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: DataWriteResponse): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<DataWriteResponse>): DataWriteResponse {
    return DataWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataWriteResponse>): DataWriteResponse {
    const message = createBaseDataWriteResponse();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseRelationshipWriteRequest(): RelationshipWriteRequest {
  return { tenantId: "", metadata: undefined, tuples: [] };
}

export const RelationshipWriteRequest: MessageFns<RelationshipWriteRequest> = {
  encode(message: RelationshipWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      RelationshipWriteRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    for (const v of message.tuples) {
      Tuple.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = RelationshipWriteRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tuples.push(Tuple.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipWriteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? RelationshipWriteRequestMetadata.fromJSON(object.metadata) : undefined,
      tuples: globalThis.Array.isArray(object?.tuples) ? object.tuples.map((e: any) => Tuple.fromJSON(e)) : [],
    };
  },

  toJSON(message: RelationshipWriteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = RelationshipWriteRequestMetadata.toJSON(message.metadata);
    }
    if (message.tuples?.length) {
      obj.tuples = message.tuples.map((e) => Tuple.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipWriteRequest>): RelationshipWriteRequest {
    return RelationshipWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipWriteRequest>): RelationshipWriteRequest {
    const message = createBaseRelationshipWriteRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? RelationshipWriteRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.tuples = object.tuples?.map((e) => Tuple.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRelationshipWriteRequestMetadata(): RelationshipWriteRequestMetadata {
  return { schemaVersion: "" };
}

export const RelationshipWriteRequestMetadata: MessageFns<RelationshipWriteRequestMetadata> = {
  encode(message: RelationshipWriteRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipWriteRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipWriteRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipWriteRequestMetadata {
    return { schemaVersion: isSet(object.schema_version) ? globalThis.String(object.schema_version) : "" };
  },

  toJSON(message: RelationshipWriteRequestMetadata): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schema_version = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipWriteRequestMetadata>): RelationshipWriteRequestMetadata {
    return RelationshipWriteRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipWriteRequestMetadata>): RelationshipWriteRequestMetadata {
    const message = createBaseRelationshipWriteRequestMetadata();
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseRelationshipWriteResponse(): RelationshipWriteResponse {
  return { snapToken: "" };
}

export const RelationshipWriteResponse: MessageFns<RelationshipWriteResponse> = {
  encode(message: RelationshipWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipWriteResponse {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: RelationshipWriteResponse): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipWriteResponse>): RelationshipWriteResponse {
    return RelationshipWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipWriteResponse>): RelationshipWriteResponse {
    const message = createBaseRelationshipWriteResponse();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseRelationshipReadRequest(): RelationshipReadRequest {
  return { tenantId: "", metadata: undefined, filter: undefined, pageSize: 0, continuousToken: "" };
}

export const RelationshipReadRequest: MessageFns<RelationshipReadRequest> = {
  encode(message: RelationshipReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      RelationshipReadRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.filter !== undefined) {
      TupleFilter.encode(message.filter, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(42).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = RelationshipReadRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = TupleFilter.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipReadRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? RelationshipReadRequestMetadata.fromJSON(object.metadata) : undefined,
      filter: isSet(object.filter) ? TupleFilter.fromJSON(object.filter) : undefined,
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: RelationshipReadRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = RelationshipReadRequestMetadata.toJSON(message.metadata);
    }
    if (message.filter !== undefined) {
      obj.filter = TupleFilter.toJSON(message.filter);
    }
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipReadRequest>): RelationshipReadRequest {
    return RelationshipReadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipReadRequest>): RelationshipReadRequest {
    const message = createBaseRelationshipReadRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? RelationshipReadRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? TupleFilter.fromPartial(object.filter)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseRelationshipReadRequestMetadata(): RelationshipReadRequestMetadata {
  return { snapToken: "" };
}

export const RelationshipReadRequestMetadata: MessageFns<RelationshipReadRequestMetadata> = {
  encode(message: RelationshipReadRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipReadRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipReadRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipReadRequestMetadata {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: RelationshipReadRequestMetadata): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipReadRequestMetadata>): RelationshipReadRequestMetadata {
    return RelationshipReadRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipReadRequestMetadata>): RelationshipReadRequestMetadata {
    const message = createBaseRelationshipReadRequestMetadata();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseRelationshipReadResponse(): RelationshipReadResponse {
  return { tuples: [], continuousToken: "" };
}

export const RelationshipReadResponse: MessageFns<RelationshipReadResponse> = {
  encode(message: RelationshipReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tuples) {
      Tuple.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tuples.push(Tuple.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipReadResponse {
    return {
      tuples: globalThis.Array.isArray(object?.tuples) ? object.tuples.map((e: any) => Tuple.fromJSON(e)) : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: RelationshipReadResponse): unknown {
    const obj: any = {};
    if (message.tuples?.length) {
      obj.tuples = message.tuples.map((e) => Tuple.toJSON(e));
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipReadResponse>): RelationshipReadResponse {
    return RelationshipReadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipReadResponse>): RelationshipReadResponse {
    const message = createBaseRelationshipReadResponse();
    message.tuples = object.tuples?.map((e) => Tuple.fromPartial(e)) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseAttributeReadRequest(): AttributeReadRequest {
  return { tenantId: "", metadata: undefined, filter: undefined, pageSize: 0, continuousToken: "" };
}

export const AttributeReadRequest: MessageFns<AttributeReadRequest> = {
  encode(message: AttributeReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.metadata !== undefined) {
      AttributeReadRequestMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.filter !== undefined) {
      AttributeFilter.encode(message.filter, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(42).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = AttributeReadRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = AttributeFilter.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeReadRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      metadata: isSet(object.metadata) ? AttributeReadRequestMetadata.fromJSON(object.metadata) : undefined,
      filter: isSet(object.filter) ? AttributeFilter.fromJSON(object.filter) : undefined,
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: AttributeReadRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = AttributeReadRequestMetadata.toJSON(message.metadata);
    }
    if (message.filter !== undefined) {
      obj.filter = AttributeFilter.toJSON(message.filter);
    }
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AttributeReadRequest>): AttributeReadRequest {
    return AttributeReadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributeReadRequest>): AttributeReadRequest {
    const message = createBaseAttributeReadRequest();
    message.tenantId = object.tenantId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? AttributeReadRequestMetadata.fromPartial(object.metadata)
      : undefined;
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? AttributeFilter.fromPartial(object.filter)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseAttributeReadRequestMetadata(): AttributeReadRequestMetadata {
  return { snapToken: "" };
}

export const AttributeReadRequestMetadata: MessageFns<AttributeReadRequestMetadata> = {
  encode(message: AttributeReadRequestMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeReadRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeReadRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeReadRequestMetadata {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: AttributeReadRequestMetadata): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AttributeReadRequestMetadata>): AttributeReadRequestMetadata {
    return AttributeReadRequestMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributeReadRequestMetadata>): AttributeReadRequestMetadata {
    const message = createBaseAttributeReadRequestMetadata();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseAttributeReadResponse(): AttributeReadResponse {
  return { attributes: [], continuousToken: "" };
}

export const AttributeReadResponse: MessageFns<AttributeReadResponse> = {
  encode(message: AttributeReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeReadResponse {
    return {
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: AttributeReadResponse): unknown {
    const obj: any = {};
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AttributeReadResponse>): AttributeReadResponse {
    return AttributeReadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributeReadResponse>): AttributeReadResponse {
    const message = createBaseAttributeReadResponse();
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseDataDeleteRequest(): DataDeleteRequest {
  return { tenantId: "", tupleFilter: undefined, attributeFilter: undefined };
}

export const DataDeleteRequest: MessageFns<DataDeleteRequest> = {
  encode(message: DataDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.tupleFilter !== undefined) {
      TupleFilter.encode(message.tupleFilter, writer.uint32(18).fork()).join();
    }
    if (message.attributeFilter !== undefined) {
      AttributeFilter.encode(message.attributeFilter, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tupleFilter = TupleFilter.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributeFilter = AttributeFilter.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataDeleteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      tupleFilter: isSet(object.tuple_filter) ? TupleFilter.fromJSON(object.tuple_filter) : undefined,
      attributeFilter: isSet(object.attribute_filter) ? AttributeFilter.fromJSON(object.attribute_filter) : undefined,
    };
  },

  toJSON(message: DataDeleteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.tupleFilter !== undefined) {
      obj.tuple_filter = TupleFilter.toJSON(message.tupleFilter);
    }
    if (message.attributeFilter !== undefined) {
      obj.attribute_filter = AttributeFilter.toJSON(message.attributeFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<DataDeleteRequest>): DataDeleteRequest {
    return DataDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataDeleteRequest>): DataDeleteRequest {
    const message = createBaseDataDeleteRequest();
    message.tenantId = object.tenantId ?? "";
    message.tupleFilter = (object.tupleFilter !== undefined && object.tupleFilter !== null)
      ? TupleFilter.fromPartial(object.tupleFilter)
      : undefined;
    message.attributeFilter = (object.attributeFilter !== undefined && object.attributeFilter !== null)
      ? AttributeFilter.fromPartial(object.attributeFilter)
      : undefined;
    return message;
  },
};

function createBaseDataDeleteResponse(): DataDeleteResponse {
  return { snapToken: "" };
}

export const DataDeleteResponse: MessageFns<DataDeleteResponse> = {
  encode(message: DataDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataDeleteResponse {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: DataDeleteResponse): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<DataDeleteResponse>): DataDeleteResponse {
    return DataDeleteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataDeleteResponse>): DataDeleteResponse {
    const message = createBaseDataDeleteResponse();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseRelationshipDeleteRequest(): RelationshipDeleteRequest {
  return { tenantId: "", filter: undefined };
}

export const RelationshipDeleteRequest: MessageFns<RelationshipDeleteRequest> = {
  encode(message: RelationshipDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.filter !== undefined) {
      TupleFilter.encode(message.filter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filter = TupleFilter.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipDeleteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      filter: isSet(object.filter) ? TupleFilter.fromJSON(object.filter) : undefined,
    };
  },

  toJSON(message: RelationshipDeleteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.filter !== undefined) {
      obj.filter = TupleFilter.toJSON(message.filter);
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipDeleteRequest>): RelationshipDeleteRequest {
    return RelationshipDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipDeleteRequest>): RelationshipDeleteRequest {
    const message = createBaseRelationshipDeleteRequest();
    message.tenantId = object.tenantId ?? "";
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? TupleFilter.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseRelationshipDeleteResponse(): RelationshipDeleteResponse {
  return { snapToken: "" };
}

export const RelationshipDeleteResponse: MessageFns<RelationshipDeleteResponse> = {
  encode(message: RelationshipDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipDeleteResponse {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: RelationshipDeleteResponse): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<RelationshipDeleteResponse>): RelationshipDeleteResponse {
    return RelationshipDeleteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RelationshipDeleteResponse>): RelationshipDeleteResponse {
    const message = createBaseRelationshipDeleteResponse();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseBundleRunRequest(): BundleRunRequest {
  return { tenantId: "", name: "", arguments: {} };
}

export const BundleRunRequest: MessageFns<BundleRunRequest> = {
  encode(message: BundleRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.arguments).forEach(([key, value]) => {
      BundleRunRequest_ArgumentsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = BundleRunRequest_ArgumentsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.arguments[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleRunRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      arguments: isObject(object.arguments)
        ? Object.entries(object.arguments).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BundleRunRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.arguments) {
      const entries = Object.entries(message.arguments);
      if (entries.length > 0) {
        obj.arguments = {};
        entries.forEach(([k, v]) => {
          obj.arguments[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BundleRunRequest>): BundleRunRequest {
    return BundleRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleRunRequest>): BundleRunRequest {
    const message = createBaseBundleRunRequest();
    message.tenantId = object.tenantId ?? "";
    message.name = object.name ?? "";
    message.arguments = Object.entries(object.arguments ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseBundleRunRequest_ArgumentsEntry(): BundleRunRequest_ArgumentsEntry {
  return { key: "", value: "" };
}

export const BundleRunRequest_ArgumentsEntry: MessageFns<BundleRunRequest_ArgumentsEntry> = {
  encode(message: BundleRunRequest_ArgumentsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleRunRequest_ArgumentsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleRunRequest_ArgumentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleRunRequest_ArgumentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BundleRunRequest_ArgumentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleRunRequest_ArgumentsEntry>): BundleRunRequest_ArgumentsEntry {
    return BundleRunRequest_ArgumentsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleRunRequest_ArgumentsEntry>): BundleRunRequest_ArgumentsEntry {
    const message = createBaseBundleRunRequest_ArgumentsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBundleRunResponse(): BundleRunResponse {
  return { snapToken: "" };
}

export const BundleRunResponse: MessageFns<BundleRunResponse> = {
  encode(message: BundleRunResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapToken !== "") {
      writer.uint32(10).string(message.snapToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleRunResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleRunResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleRunResponse {
    return { snapToken: isSet(object.snap_token) ? globalThis.String(object.snap_token) : "" };
  },

  toJSON(message: BundleRunResponse): unknown {
    const obj: any = {};
    if (message.snapToken !== "") {
      obj.snap_token = message.snapToken;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleRunResponse>): BundleRunResponse {
    return BundleRunResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleRunResponse>): BundleRunResponse {
    const message = createBaseBundleRunResponse();
    message.snapToken = object.snapToken ?? "";
    return message;
  },
};

function createBaseBundleWriteRequest(): BundleWriteRequest {
  return { tenantId: "", bundles: [] };
}

export const BundleWriteRequest: MessageFns<BundleWriteRequest> = {
  encode(message: BundleWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    for (const v of message.bundles) {
      DataBundle.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bundles.push(DataBundle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleWriteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      bundles: globalThis.Array.isArray(object?.bundles) ? object.bundles.map((e: any) => DataBundle.fromJSON(e)) : [],
    };
  },

  toJSON(message: BundleWriteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.bundles?.length) {
      obj.bundles = message.bundles.map((e) => DataBundle.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BundleWriteRequest>): BundleWriteRequest {
    return BundleWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleWriteRequest>): BundleWriteRequest {
    const message = createBaseBundleWriteRequest();
    message.tenantId = object.tenantId ?? "";
    message.bundles = object.bundles?.map((e) => DataBundle.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBundleWriteResponse(): BundleWriteResponse {
  return { names: [] };
}

export const BundleWriteResponse: MessageFns<BundleWriteResponse> = {
  encode(message: BundleWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.names) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.names.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleWriteResponse {
    return { names: globalThis.Array.isArray(object?.names) ? object.names.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: BundleWriteResponse): unknown {
    const obj: any = {};
    if (message.names?.length) {
      obj.names = message.names;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleWriteResponse>): BundleWriteResponse {
    return BundleWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleWriteResponse>): BundleWriteResponse {
    const message = createBaseBundleWriteResponse();
    message.names = object.names?.map((e) => e) || [];
    return message;
  },
};

function createBaseBundleReadRequest(): BundleReadRequest {
  return { tenantId: "", name: "" };
}

export const BundleReadRequest: MessageFns<BundleReadRequest> = {
  encode(message: BundleReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleReadRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: BundleReadRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleReadRequest>): BundleReadRequest {
    return BundleReadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleReadRequest>): BundleReadRequest {
    const message = createBaseBundleReadRequest();
    message.tenantId = object.tenantId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBundleReadResponse(): BundleReadResponse {
  return { bundle: undefined };
}

export const BundleReadResponse: MessageFns<BundleReadResponse> = {
  encode(message: BundleReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bundle !== undefined) {
      DataBundle.encode(message.bundle, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bundle = DataBundle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleReadResponse {
    return { bundle: isSet(object.bundle) ? DataBundle.fromJSON(object.bundle) : undefined };
  },

  toJSON(message: BundleReadResponse): unknown {
    const obj: any = {};
    if (message.bundle !== undefined) {
      obj.bundle = DataBundle.toJSON(message.bundle);
    }
    return obj;
  },

  create(base?: DeepPartial<BundleReadResponse>): BundleReadResponse {
    return BundleReadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleReadResponse>): BundleReadResponse {
    const message = createBaseBundleReadResponse();
    message.bundle = (object.bundle !== undefined && object.bundle !== null)
      ? DataBundle.fromPartial(object.bundle)
      : undefined;
    return message;
  },
};

function createBaseBundleDeleteRequest(): BundleDeleteRequest {
  return { tenantId: "", name: "" };
}

export const BundleDeleteRequest: MessageFns<BundleDeleteRequest> = {
  encode(message: BundleDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantId !== "") {
      writer.uint32(10).string(message.tenantId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleDeleteRequest {
    return {
      tenantId: isSet(object.tenant_id) ? globalThis.String(object.tenant_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: BundleDeleteRequest): unknown {
    const obj: any = {};
    if (message.tenantId !== "") {
      obj.tenant_id = message.tenantId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleDeleteRequest>): BundleDeleteRequest {
    return BundleDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleDeleteRequest>): BundleDeleteRequest {
    const message = createBaseBundleDeleteRequest();
    message.tenantId = object.tenantId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBundleDeleteResponse(): BundleDeleteResponse {
  return { name: "" };
}

export const BundleDeleteResponse: MessageFns<BundleDeleteResponse> = {
  encode(message: BundleDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleDeleteResponse {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: BundleDeleteResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<BundleDeleteResponse>): BundleDeleteResponse {
    return BundleDeleteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleDeleteResponse>): BundleDeleteResponse {
    const message = createBaseBundleDeleteResponse();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTenantCreateRequest(): TenantCreateRequest {
  return { id: "", name: "" };
}

export const TenantCreateRequest: MessageFns<TenantCreateRequest> = {
  encode(message: TenantCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantCreateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: TenantCreateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<TenantCreateRequest>): TenantCreateRequest {
    return TenantCreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantCreateRequest>): TenantCreateRequest {
    const message = createBaseTenantCreateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTenantCreateResponse(): TenantCreateResponse {
  return { tenant: undefined };
}

export const TenantCreateResponse: MessageFns<TenantCreateResponse> = {
  encode(message: TenantCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenant !== undefined) {
      Tenant.encode(message.tenant, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenant = Tenant.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantCreateResponse {
    return { tenant: isSet(object.tenant) ? Tenant.fromJSON(object.tenant) : undefined };
  },

  toJSON(message: TenantCreateResponse): unknown {
    const obj: any = {};
    if (message.tenant !== undefined) {
      obj.tenant = Tenant.toJSON(message.tenant);
    }
    return obj;
  },

  create(base?: DeepPartial<TenantCreateResponse>): TenantCreateResponse {
    return TenantCreateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantCreateResponse>): TenantCreateResponse {
    const message = createBaseTenantCreateResponse();
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? Tenant.fromPartial(object.tenant)
      : undefined;
    return message;
  },
};

function createBaseTenantDeleteRequest(): TenantDeleteRequest {
  return { id: "" };
}

export const TenantDeleteRequest: MessageFns<TenantDeleteRequest> = {
  encode(message: TenantDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantDeleteRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: TenantDeleteRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<TenantDeleteRequest>): TenantDeleteRequest {
    return TenantDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantDeleteRequest>): TenantDeleteRequest {
    const message = createBaseTenantDeleteRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTenantDeleteResponse(): TenantDeleteResponse {
  return { tenant: undefined };
}

export const TenantDeleteResponse: MessageFns<TenantDeleteResponse> = {
  encode(message: TenantDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenant !== undefined) {
      Tenant.encode(message.tenant, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenant = Tenant.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantDeleteResponse {
    return { tenant: isSet(object.tenant) ? Tenant.fromJSON(object.tenant) : undefined };
  },

  toJSON(message: TenantDeleteResponse): unknown {
    const obj: any = {};
    if (message.tenant !== undefined) {
      obj.tenant = Tenant.toJSON(message.tenant);
    }
    return obj;
  },

  create(base?: DeepPartial<TenantDeleteResponse>): TenantDeleteResponse {
    return TenantDeleteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantDeleteResponse>): TenantDeleteResponse {
    const message = createBaseTenantDeleteResponse();
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? Tenant.fromPartial(object.tenant)
      : undefined;
    return message;
  },
};

function createBaseTenantListRequest(): TenantListRequest {
  return { pageSize: 0, continuousToken: "" };
}

export const TenantListRequest: MessageFns<TenantListRequest> = {
  encode(message: TenantListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).uint32(message.pageSize);
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantListRequest {
    return {
      pageSize: isSet(object.page_size) ? globalThis.Number(object.page_size) : 0,
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: TenantListRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.page_size = Math.round(message.pageSize);
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<TenantListRequest>): TenantListRequest {
    return TenantListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantListRequest>): TenantListRequest {
    const message = createBaseTenantListRequest();
    message.pageSize = object.pageSize ?? 0;
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

function createBaseTenantListResponse(): TenantListResponse {
  return { tenants: [], continuousToken: "" };
}

export const TenantListResponse: MessageFns<TenantListResponse> = {
  encode(message: TenantListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tenants) {
      Tenant.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.continuousToken !== "") {
      writer.uint32(18).string(message.continuousToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenants.push(Tenant.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.continuousToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TenantListResponse {
    return {
      tenants: globalThis.Array.isArray(object?.tenants) ? object.tenants.map((e: any) => Tenant.fromJSON(e)) : [],
      continuousToken: isSet(object.continuous_token) ? globalThis.String(object.continuous_token) : "",
    };
  },

  toJSON(message: TenantListResponse): unknown {
    const obj: any = {};
    if (message.tenants?.length) {
      obj.tenants = message.tenants.map((e) => Tenant.toJSON(e));
    }
    if (message.continuousToken !== "") {
      obj.continuous_token = message.continuousToken;
    }
    return obj;
  },

  create(base?: DeepPartial<TenantListResponse>): TenantListResponse {
    return TenantListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TenantListResponse>): TenantListResponse {
    const message = createBaseTenantListResponse();
    message.tenants = object.tenants?.map((e) => Tenant.fromPartial(e)) || [];
    message.continuousToken = object.continuousToken ?? "";
    return message;
  },
};

/** Permission service contains methods to interact with permissions. */
export type PermissionDefinition = typeof PermissionDefinition;
export const PermissionDefinition = {
  name: "Permission",
  fullName: "base.v1.Permission",
  methods: {
    /**
     * Check method receives a PermissionCheckRequest and returns a PermissionCheckResponse.
     * It is used to determine whether a specific user has permission to perform an action on a resource.
     * For example, "Can the user 1 push to repository 1?"
     */
    check: {
      name: "Check",
      requestType: PermissionCheckRequest,
      requestStream: false,
      responseType: PermissionCheckResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              227,
              12,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              9,
              99,
              104,
              101,
              99,
              107,
              32,
              97,
              112,
              105,
              42,
              17,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              99,
              104,
              101,
              99,
              107,
              106,
              182,
              12,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              164,
              12,
              50,
              161,
              12,
              10,
              192,
              4,
              42,
              189,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              157,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              146,
              4,
              26,
              143,
              4,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              67,
              104,
              101,
              99,
              107,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              67,
              104,
              101,
              99,
              107,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              67,
              104,
              101,
              99,
              107,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              68,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              105,
              102,
              32,
              99,
              114,
              46,
              67,
              97,
              110,
              32,
              61,
              61,
              32,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              67,
              104,
              101,
              99,
              107,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              95,
              82,
              101,
              115,
              117,
              108,
              116,
              95,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              65,
              76,
              76,
              79,
              87,
              69,
              68,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              65,
              76,
              76,
              79,
              87,
              69,
              68,
              10,
              125,
              32,
              101,
              108,
              115,
              101,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              68,
              69,
              78,
              73,
              69,
              68,
              10,
              125,
              10,
              155,
              4,
              42,
              152,
              4,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              238,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              227,
              3,
              26,
              224,
              3,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              99,
              104,
              101,
              99,
              107,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              32,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              100,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              105,
              102,
              32,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              99,
              97,
              110,
              32,
              61,
              61,
              61,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              67,
              104,
              101,
              99,
              107,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              95,
              82,
              101,
              115,
              117,
              108,
              116,
              46,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              65,
              76,
              76,
              79,
              87,
              69,
              68,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              108,
              111,
              103,
              40,
              34,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              65,
              76,
              76,
              79,
              87,
              69,
              68,
              34,
              41,
              10,
              32,
              32,
              32,
              32,
              125,
              32,
              101,
              108,
              115,
              101,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              108,
              111,
              103,
              40,
              34,
              82,
              69,
              83,
              85,
              76,
              84,
              95,
              68,
              69,
              78,
              73,
              69,
              68,
              34,
              41,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              10,
              189,
              3,
              42,
              186,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              150,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              139,
              3,
              26,
              136,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              99,
              104,
              101,
              99,
              107,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              112,
              116,
              104,
              34,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              46,
              34,
              41,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              99,
              104,
              101,
              99,
              107,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Expand method receives a PermissionExpandRequest and returns a PermissionExpandResponse.
     * It expands relationships according to the schema provided.
     */
    expand: {
      name: "Expand",
      requestType: PermissionExpandRequest,
      requestStream: false,
      responseType: PermissionExpandResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              171,
              8,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              10,
              101,
              120,
              112,
              97,
              110,
              100,
              32,
              97,
              112,
              105,
              42,
              18,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              101,
              120,
              112,
              97,
              110,
              100,
              106,
              252,
              7,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              234,
              7,
              50,
              231,
              7,
              10,
              238,
              2,
              42,
              235,
              2,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              203,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              192,
              2,
              26,
              189,
              2,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              69,
              120,
              112,
              97,
              110,
              100,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              69,
              120,
              112,
              97,
              110,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              69,
              120,
              112,
              97,
              110,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              112,
              117,
              115,
              104,
              34,
              44,
              10,
              125,
              41,
              10,
              141,
              2,
              42,
              138,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              224,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              213,
              1,
              26,
              210,
              1,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              101,
              120,
              112,
              97,
              110,
              100,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              112,
              117,
              115,
              104,
              34,
              44,
              10,
              125,
              41,
              10,
              227,
              2,
              42,
              224,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              188,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              177,
              2,
              26,
              174,
              2,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              112,
              117,
              115,
              104,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              34,
              42,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * LookupEntity method receives a PermissionLookupEntityRequest and returns a PermissionLookupEntityResponse.
     * It is used to retrieve an entity by its identifier.
     */
    lookupEntity: {
      name: "LookupEntity",
      requestType: PermissionLookupEntityRequest,
      requestStream: false,
      responseType: PermissionLookupEntityResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              144,
              11,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              13,
              108,
              111,
              111,
              107,
              117,
              112,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              42,
              24,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              106,
              216,
              10,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              198,
              10,
              50,
              195,
              10,
              10,
              213,
              3,
              42,
              210,
              3,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              178,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              167,
              3,
              26,
              164,
              3,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              68,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              80,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              167,
              3,
              42,
              164,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              250,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              239,
              2,
              26,
              236,
              2,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              100,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              108,
              111,
              103,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              105,
              100,
              115,
              41,
              10,
              125,
              41,
              10,
              190,
              3,
              42,
              187,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              151,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              140,
              3,
              26,
              137,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              101,
              110,
              116,
              105,
              116,
              121,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              112,
              116,
              104,
              34,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              34,
              49,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * LookupEntityStream method receives a PermissionLookupEntityRequest and streams a series of PermissionLookupEntityStreamResponse messages.
     * It is used to retrieve entities by their identifiers in a streaming fashion.
     */
    lookupEntityStream: {
      name: "LookupEntityStream",
      requestType: PermissionLookupEntityRequest,
      requestStream: false,
      responseType: PermissionLookupEntityStreamResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              153,
              12,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              20,
              108,
              111,
              111,
              107,
              117,
              112,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              115,
              116,
              114,
              101,
              97,
              109,
              42,
              30,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              83,
              116,
              114,
              101,
              97,
              109,
              106,
              212,
              11,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              194,
              11,
              50,
              191,
              11,
              10,
              200,
              4,
              42,
              197,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              165,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              154,
              4,
              26,
              151,
              4,
              115,
              116,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              83,
              116,
              114,
              101,
              97,
              109,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              68,
              101,
              112,
              116,
              104,
              58,
              32,
              53,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              118,
              105,
              101,
              119,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              10,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              115,
              116,
              114,
              101,
              97,
              109,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              102,
              111,
              114,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              114,
              101,
              115,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              115,
              116,
              114,
              46,
              82,
              101,
              99,
              118,
              40,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              105,
              102,
              32,
              101,
              114,
              114,
              32,
              61,
              61,
              32,
              105,
              111,
              46,
              69,
              79,
              70,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              98,
              114,
              101,
              97,
              107,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              114,
              101,
              115,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              10,
              125,
              10,
              241,
              6,
              42,
              238,
              6,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              196,
              6,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              185,
              6,
              26,
              182,
              6,
              99,
              111,
              110,
              115,
              116,
              32,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              32,
              61,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              40,
              34,
              64,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              47,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              45,
              110,
              111,
              100,
              101,
              34,
              41,
              59,
              10,
              99,
              111,
              110,
              115,
              116,
              32,
              123,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              83,
              116,
              114,
              101,
              97,
              109,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              125,
              32,
              61,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              40,
              34,
              64,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              47,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              45,
              110,
              111,
              100,
              101,
              47,
              100,
              105,
              115,
              116,
              47,
              115,
              114,
              99,
              47,
              103,
              114,
              112,
              99,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              47,
              98,
              97,
              115,
              101,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              41,
              59,
              10,
              10,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              32,
              109,
              97,
              105,
              110,
              40,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              61,
              32,
              110,
              101,
              119,
              32,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              46,
              103,
              114,
              112,
              99,
              46,
              110,
              101,
              119,
              67,
              108,
              105,
              101,
              110,
              116,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              58,
              32,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              56,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              59,
              10,
              10,
              32,
              32,
              32,
              32,
              108,
              101,
              116,
              32,
              114,
              101,
              115,
              32,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              83,
              116,
              114,
              101,
              97,
              109,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              100,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              118,
              105,
              101,
              119,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              59,
              10,
              10,
              32,
              32,
              32,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              40,
              114,
              101,
              115,
              41,
              59,
              10,
              125,
              10,
              10,
              97,
              115,
              121,
              110,
              99,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              40,
              114,
              101,
              115,
              58,
              32,
              65,
              115,
              121,
              110,
              99,
              73,
              116,
              101,
              114,
              97,
              98,
              108,
              101,
              60,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              69,
              110,
              116,
              105,
              116,
              121,
              83,
              116,
              114,
              101,
              97,
              109,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              62,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              102,
              111,
              114,
              32,
              97,
              119,
              97,
              105,
              116,
              32,
              40,
              99,
              111,
              110,
              115,
              116,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              34,
              56,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              101,
              110,
              116,
              105,
              116,
              121,
              45,
              115,
              116,
              114,
              101,
              97,
              109,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * LookupSubject method receives a PermissionLookupSubjectRequest and returns a PermissionLookupSubjectResponse.
     * It is used to retrieve a subject by its identifier.
     */
    lookupSubject: {
      name: "LookupSubject",
      requestType: PermissionLookupSubjectRequest,
      requestStream: false,
      responseType: PermissionLookupSubjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              189,
              12,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              14,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              42,
              25,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              106,
              131,
              12,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              241,
              11,
              50,
              238,
              11,
              10,
              159,
              4,
              42,
              156,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              252,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              241,
              3,
              26,
              238,
              3,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              76,
              111,
              111,
              107,
              117,
              112,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              76,
              111,
              111,
              107,
              117,
              112,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              68,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              58,
              32,
              38,
              118,
              49,
              46,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              220,
              3,
              42,
              217,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              175,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              164,
              3,
              26,
              161,
              3,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              108,
              111,
              111,
              107,
              117,
              112,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              100,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              95,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              58,
              32,
              49,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              108,
              111,
              103,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              115,
              41,
              10,
              125,
              41,
              10,
              234,
              3,
              42,
              231,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              195,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              184,
              3,
              26,
              181,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              112,
              116,
              104,
              34,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              95,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              34,
              50,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              108,
              111,
              111,
              107,
              117,
              112,
              45,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * SubjectPermission method receives a PermissionSubjectPermissionRequest and returns a PermissionSubjectPermissionResponse.
     * It is used to retrieve permissions related to a specific subject.
     */
    subjectPermission: {
      name: "SubjectPermission",
      requestType: PermissionSubjectPermissionRequest,
      requestStream: false,
      responseType: PermissionSubjectPermissionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              190,
              11,
              10,
              10,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              18,
              18,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              42,
              29,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              46,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              106,
              252,
              10,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              234,
              10,
              50,
              231,
              10,
              10,
              241,
              3,
              42,
              238,
              3,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              206,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              195,
              3,
              26,
              192,
              3,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              79,
              110,
              108,
              121,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              102,
              97,
              108,
              115,
              101,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              68,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              159,
              3,
              42,
              156,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              242,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              231,
              2,
              26,
              228,
              2,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              111,
              110,
              108,
              121,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              100,
              101,
              112,
              116,
              104,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              108,
              111,
              103,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              59,
              10,
              125,
              41,
              10,
              206,
              3,
              42,
              203,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              167,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              156,
              3,
              26,
              153,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              45,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              111,
              110,
              108,
              121,
              95,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              112,
              116,
              104,
              34,
              58,
              32,
              50,
              48,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              34,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              45,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PermissionServiceImplementation<CallContextExt = {}> {
  /**
   * Check method receives a PermissionCheckRequest and returns a PermissionCheckResponse.
   * It is used to determine whether a specific user has permission to perform an action on a resource.
   * For example, "Can the user 1 push to repository 1?"
   */
  check(
    request: PermissionCheckRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PermissionCheckResponse>>;
  /**
   * Expand method receives a PermissionExpandRequest and returns a PermissionExpandResponse.
   * It expands relationships according to the schema provided.
   */
  expand(
    request: PermissionExpandRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PermissionExpandResponse>>;
  /**
   * LookupEntity method receives a PermissionLookupEntityRequest and returns a PermissionLookupEntityResponse.
   * It is used to retrieve an entity by its identifier.
   */
  lookupEntity(
    request: PermissionLookupEntityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PermissionLookupEntityResponse>>;
  /**
   * LookupEntityStream method receives a PermissionLookupEntityRequest and streams a series of PermissionLookupEntityStreamResponse messages.
   * It is used to retrieve entities by their identifiers in a streaming fashion.
   */
  lookupEntityStream(
    request: PermissionLookupEntityRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<PermissionLookupEntityStreamResponse>>;
  /**
   * LookupSubject method receives a PermissionLookupSubjectRequest and returns a PermissionLookupSubjectResponse.
   * It is used to retrieve a subject by its identifier.
   */
  lookupSubject(
    request: PermissionLookupSubjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PermissionLookupSubjectResponse>>;
  /**
   * SubjectPermission method receives a PermissionSubjectPermissionRequest and returns a PermissionSubjectPermissionResponse.
   * It is used to retrieve permissions related to a specific subject.
   */
  subjectPermission(
    request: PermissionSubjectPermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PermissionSubjectPermissionResponse>>;
}

export interface PermissionClient<CallOptionsExt = {}> {
  /**
   * Check method receives a PermissionCheckRequest and returns a PermissionCheckResponse.
   * It is used to determine whether a specific user has permission to perform an action on a resource.
   * For example, "Can the user 1 push to repository 1?"
   */
  check(
    request: DeepPartial<PermissionCheckRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PermissionCheckResponse>;
  /**
   * Expand method receives a PermissionExpandRequest and returns a PermissionExpandResponse.
   * It expands relationships according to the schema provided.
   */
  expand(
    request: DeepPartial<PermissionExpandRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PermissionExpandResponse>;
  /**
   * LookupEntity method receives a PermissionLookupEntityRequest and returns a PermissionLookupEntityResponse.
   * It is used to retrieve an entity by its identifier.
   */
  lookupEntity(
    request: DeepPartial<PermissionLookupEntityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PermissionLookupEntityResponse>;
  /**
   * LookupEntityStream method receives a PermissionLookupEntityRequest and streams a series of PermissionLookupEntityStreamResponse messages.
   * It is used to retrieve entities by their identifiers in a streaming fashion.
   */
  lookupEntityStream(
    request: DeepPartial<PermissionLookupEntityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<PermissionLookupEntityStreamResponse>;
  /**
   * LookupSubject method receives a PermissionLookupSubjectRequest and returns a PermissionLookupSubjectResponse.
   * It is used to retrieve a subject by its identifier.
   */
  lookupSubject(
    request: DeepPartial<PermissionLookupSubjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PermissionLookupSubjectResponse>;
  /**
   * SubjectPermission method receives a PermissionSubjectPermissionRequest and returns a PermissionSubjectPermissionResponse.
   * It is used to retrieve permissions related to a specific subject.
   */
  subjectPermission(
    request: DeepPartial<PermissionSubjectPermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PermissionSubjectPermissionResponse>;
}

/**
 * Watch is the main RPC in the Watch service. It establishes a stream between
 * the client and the server. The server pushes data changes into this stream
 * and the client can read those in real time.
 */
export type WatchDefinition = typeof WatchDefinition;
export const WatchDefinition = {
  name: "Watch",
  fullName: "base.v1.Watch",
  methods: {
    watch: {
      name: "Watch",
      requestType: WatchRequest,
      requestStream: false,
      responseType: WatchResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              147,
              7,
              10,
              5,
              87,
              97,
              116,
              99,
              104,
              18,
              13,
              119,
              97,
              116,
              99,
              104,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              42,
              11,
              119,
              97,
              116,
              99,
              104,
              46,
              119,
              97,
              116,
              99,
              104,
              106,
              237,
              6,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              219,
              6,
              50,
              216,
              6,
              10,
              158,
              2,
              42,
              155,
              2,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              251,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              240,
              1,
              26,
              237,
              1,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              87,
              97,
              116,
              99,
              104,
              46,
              87,
              97,
              116,
              99,
              104,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              87,
              97,
              116,
              99,
              104,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              115,
              116,
              114,
              101,
              97,
              109,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              102,
              111,
              114,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              114,
              101,
              115,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              114,
              46,
              82,
              101,
              99,
              118,
              40,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              105,
              102,
              32,
              101,
              114,
              114,
              32,
              61,
              61,
              32,
              105,
              111,
              46,
              69,
              79,
              70,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              98,
              114,
              101,
              97,
              107,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              114,
              101,
              115,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              115,
              10,
              125,
              10,
              10,
              180,
              4,
              42,
              177,
              4,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              135,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              252,
              3,
              26,
              249,
              3,
              99,
              111,
              110,
              115,
              116,
              32,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              32,
              61,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              40,
              34,
              64,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              47,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              45,
              110,
              111,
              100,
              101,
              34,
              41,
              59,
              10,
              99,
              111,
              110,
              115,
              116,
              32,
              123,
              87,
              97,
              116,
              99,
              104,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              125,
              32,
              61,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              40,
              34,
              64,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              47,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              45,
              110,
              111,
              100,
              101,
              47,
              100,
              105,
              115,
              116,
              47,
              115,
              114,
              99,
              47,
              103,
              114,
              112,
              99,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              47,
              98,
              97,
              115,
              101,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              41,
              59,
              10,
              10,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              32,
              109,
              97,
              105,
              110,
              40,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              61,
              32,
              110,
              101,
              119,
              32,
              112,
              101,
              114,
              109,
              105,
              102,
              121,
              46,
              103,
              114,
              112,
              99,
              46,
              110,
              101,
              119,
              67,
              108,
              105,
              101,
              110,
              116,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              58,
              32,
              34,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              56,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              59,
              10,
              10,
              32,
              32,
              32,
              32,
              108,
              101,
              116,
              32,
              114,
              101,
              115,
              32,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              119,
              97,
              116,
              99,
              104,
              46,
              119,
              97,
              116,
              99,
              104,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              59,
              10,
              10,
              32,
              32,
              32,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              40,
              114,
              101,
              115,
              41,
              59,
              10,
              125,
              10,
              10,
              97,
              115,
              121,
              110,
              99,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              40,
              114,
              101,
              115,
              58,
              32,
              65,
              115,
              121,
              110,
              99,
              73,
              116,
              101,
              114,
              97,
              98,
              108,
              101,
              60,
              87,
              97,
              116,
              99,
              104,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              62,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              102,
              111,
              114,
              32,
              97,
              119,
              97,
              105,
              116,
              32,
              40,
              99,
              111,
              110,
              115,
              116,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              41,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              10,
            ]),
          ],
          578365826: [
            Buffer.from([
              34,
              34,
              29,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              119,
              97,
              116,
              99,
              104,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface WatchServiceImplementation<CallContextExt = {}> {
  watch(
    request: WatchRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<WatchResponse>>;
}

export interface WatchClient<CallOptionsExt = {}> {
  watch(request: DeepPartial<WatchRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<WatchResponse>;
}

/** The Schema service definition. */
export type SchemaDefinition = typeof SchemaDefinition;
export const SchemaDefinition = {
  name: "Schema",
  fullName: "base.v1.Schema",
  methods: {
    /** Write is an RPC that allows you to write your authorization model. */
    write: {
      name: "Write",
      requestType: SchemaWriteRequest,
      requestStream: false,
      responseType: SchemaWriteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              15,
              10,
              6,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              12,
              119,
              114,
              105,
              116,
              101,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              42,
              13,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              46,
              119,
              114,
              105,
              116,
              101,
              106,
              178,
              15,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              160,
              15,
              50,
              157,
              15,
              10,
              242,
              4,
              42,
              239,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              207,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              196,
              4,
              26,
              193,
              4,
              115,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              46,
              87,
              114,
              105,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              87,
              114,
              105,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              58,
              32,
              96,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              117,
              115,
              101,
              114,
              32,
              123,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              61,
              32,
              40,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              97,
              100,
              109,
              105,
              110,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              119,
              110,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              32,
              64,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              112,
              117,
              115,
              104,
              32,
              61,
              32,
              111,
              119,
              110,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              97,
              100,
              32,
              61,
              32,
              40,
              111,
              119,
              110,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              111,
              119,
              110,
              101,
              114,
              41,
              41,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              96,
              44,
              10,
              125,
              41,
              10,
              243,
              4,
              42,
              240,
              4,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              198,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              187,
              4,
              26,
              184,
              4,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              119,
              114,
              105,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              58,
              32,
              96,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              117,
              115,
              101,
              114,
              32,
              123,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              61,
              32,
              40,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              97,
              100,
              109,
              105,
              110,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              119,
              110,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              32,
              64,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              112,
              117,
              115,
              104,
              32,
              61,
              32,
              111,
              119,
              110,
              101,
              114,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              97,
              100,
              32,
              61,
              32,
              40,
              111,
              119,
              110,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              111,
              119,
              110,
              101,
              114,
              41,
              41,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              96,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              175,
              5,
              42,
              172,
              5,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              136,
              5,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              253,
              4,
              26,
              250,
              4,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              119,
              114,
              105,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              58,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              117,
              115,
              101,
              114,
              32,
              123,
              125,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              123,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              32,
              64,
              117,
              115,
              101,
              114,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              61,
              32,
              40,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              97,
              100,
              109,
              105,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              125,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              32,
              123,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              119,
              110,
              101,
              114,
              32,
              64,
              117,
              115,
              101,
              114,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              32,
              64,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              92,
              110,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              112,
              117,
              115,
              104,
              32,
              61,
              32,
              111,
              119,
              110,
              101,
              114,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              97,
              100,
              32,
              61,
              32,
              40,
              111,
              119,
              110,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              41,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              61,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              46,
              97,
              100,
              109,
              105,
              110,
              32,
              111,
              114,
              32,
              111,
              119,
              110,
              101,
              114,
              41,
              41,
              92,
              110,
              32,
              125,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              42,
              34,
              37,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              119,
              114,
              105,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** PartialWrite is an RPC that allows you to partially update an existing authorization model. */
    partialWrite: {
      name: "PartialWrite",
      requestType: SchemaPartialWriteRequest,
      requestStream: false,
      responseType: SchemaPartialWriteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              74,
              10,
              6,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              41,
              112,
              97,
              114,
              116,
              105,
              97,
              108,
              108,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              111,
              100,
              101,
              108,
              42,
              21,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              46,
              112,
              97,
              114,
              116,
              105,
              97,
              108,
              45,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              50,
              50,
              45,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              112,
              97,
              114,
              116,
              105,
              97,
              108,
              45,
              119,
              114,
              105,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** Read is an RPC that allows you to read your authorization model. */
    read: {
      name: "Read",
      requestType: SchemaReadRequest,
      requestStream: false,
      responseType: SchemaReadResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              255,
              5,
              10,
              6,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              11,
              114,
              101,
              97,
              100,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              42,
              12,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              46,
              114,
              101,
              97,
              100,
              106,
              217,
              5,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              199,
              5,
              50,
              196,
              5,
              10,
              245,
              1,
              42,
              242,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              210,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              199,
              1,
              26,
              196,
              1,
              115,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              46,
              82,
              101,
              97,
              100,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              99,
              110,
              98,
              101,
              54,
              115,
              101,
              53,
              102,
              109,
              97,
              108,
              49,
              56,
              103,
              112,
              99,
              54,
              54,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              182,
              1,
              42,
              179,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              137,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              127,
              26,
              125,
              108,
              101,
              116,
              32,
              114,
              101,
              115,
              32,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              114,
              101,
              97,
              100,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              115,
              119,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              144,
              2,
              42,
              141,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              233,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              222,
              1,
              26,
              219,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              114,
              101,
              97,
              100,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              99,
              110,
              98,
              101,
              54,
              115,
              101,
              53,
              102,
              109,
              97,
              108,
              49,
              56,
              103,
              112,
              99,
              54,
              54,
              103,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              41,
              34,
              36,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              114,
              101,
              97,
              100,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** List is an RPC that allows you to list all authorization models. */
    list: {
      name: "List",
      requestType: SchemaListRequest,
      requestStream: false,
      responseType: SchemaListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              253,
              4,
              10,
              6,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              11,
              108,
              105,
              115,
              116,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              42,
              12,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              46,
              108,
              105,
              115,
              116,
              106,
              215,
              4,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              197,
              4,
              50,
              194,
              4,
              10,
              189,
              1,
              42,
              186,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              154,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              143,
              1,
              26,
              140,
              1,
              115,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              46,
              76,
              105,
              115,
              116,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              76,
              105,
              115,
              116,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              80,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              133,
              1,
              42,
              130,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              89,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              79,
              26,
              77,
              108,
              101,
              116,
              32,
              114,
              101,
              115,
              32,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              108,
              105,
              115,
              116,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              10,
              247,
              1,
              42,
              244,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              208,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              197,
              1,
              26,
              194,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              108,
              105,
              115,
              116,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              41,
              34,
              36,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              108,
              105,
              115,
              116,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SchemaServiceImplementation<CallContextExt = {}> {
  /** Write is an RPC that allows you to write your authorization model. */
  write(request: SchemaWriteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SchemaWriteResponse>>;
  /** PartialWrite is an RPC that allows you to partially update an existing authorization model. */
  partialWrite(
    request: SchemaPartialWriteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SchemaPartialWriteResponse>>;
  /** Read is an RPC that allows you to read your authorization model. */
  read(request: SchemaReadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SchemaReadResponse>>;
  /** List is an RPC that allows you to list all authorization models. */
  list(request: SchemaListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SchemaListResponse>>;
}

export interface SchemaClient<CallOptionsExt = {}> {
  /** Write is an RPC that allows you to write your authorization model. */
  write(request: DeepPartial<SchemaWriteRequest>, options?: CallOptions & CallOptionsExt): Promise<SchemaWriteResponse>;
  /** PartialWrite is an RPC that allows you to partially update an existing authorization model. */
  partialWrite(
    request: DeepPartial<SchemaPartialWriteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SchemaPartialWriteResponse>;
  /** Read is an RPC that allows you to read your authorization model. */
  read(request: DeepPartial<SchemaReadRequest>, options?: CallOptions & CallOptionsExt): Promise<SchemaReadResponse>;
  /** List is an RPC that allows you to list all authorization models. */
  list(request: DeepPartial<SchemaListRequest>, options?: CallOptions & CallOptionsExt): Promise<SchemaListResponse>;
}

/** The Data service provides RPC methods for managing data in the context of relationships and attributes. */
export type DataDefinition = typeof DataDefinition;
export const DataDefinition = {
  name: "Data",
  fullName: "base.v1.Data",
  methods: {
    /** The Write RPC method creates a new relation tuple. */
    write: {
      name: "Write",
      requestType: DataWriteRequest,
      requestStream: false,
      responseType: DataWriteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              196,
              20,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              10,
              119,
              114,
              105,
              116,
              101,
              32,
              100,
              97,
              116,
              97,
              42,
              10,
              100,
              97,
              116,
              97,
              46,
              119,
              114,
              105,
              116,
              101,
              106,
              163,
              20,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              145,
              20,
              50,
              142,
              20,
              10,
              182,
              7,
              42,
              179,
              7,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              147,
              7,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              136,
              7,
              26,
              133,
              7,
              47,
              47,
              32,
              67,
              111,
              110,
              118,
              101,
              114,
              116,
              32,
              116,
              104,
              101,
              32,
              119,
              114,
              97,
              112,
              112,
              101,
              100,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              110,
              116,
              111,
              32,
              65,
              110,
              121,
              32,
              112,
              114,
              111,
              116,
              111,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              10,
              118,
              97,
              108,
              117,
              101,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              97,
              110,
              121,
              112,
              98,
              46,
              78,
              101,
              119,
              40,
              38,
              118,
              49,
              46,
              66,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              123,
              10,
              32,
              32,
              32,
              32,
              68,
              97,
              116,
              97,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              125,
              41,
              10,
              105,
              102,
              32,
              101,
              114,
              114,
              32,
              33,
              61,
              32,
              110,
              105,
              108,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              72,
              97,
              110,
              100,
              108,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              10,
              125,
              10,
              10,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              68,
              97,
              116,
              97,
              46,
              87,
              114,
              105,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              87,
              114,
              105,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              87,
              114,
              105,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              84,
              117,
              112,
              108,
              101,
              115,
              58,
              32,
              91,
              93,
              42,
              118,
              49,
              46,
              84,
              117,
              112,
              108,
              101,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              32,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              111,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              32,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              58,
              32,
              91,
              93,
              42,
              118,
              49,
              46,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              32,
              32,
              34,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              58,
              32,
              34,
              105,
              115,
              95,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              86,
              97,
              108,
              117,
              101,
              58,
              32,
              32,
              32,
              32,
              32,
              118,
              97,
              108,
              117,
              101,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              128,
              6,
              42,
              253,
              5,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              211,
              5,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              200,
              5,
              26,
              197,
              5,
              99,
              111,
              110,
              115,
              116,
              32,
              98,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              32,
              61,
              32,
              66,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              46,
              102,
              114,
              111,
              109,
              74,
              83,
              79,
              78,
              40,
              123,
              32,
              100,
              97,
              116,
              97,
              58,
              32,
              116,
              114,
              117,
              101,
              32,
              125,
              41,
              59,
              10,
              10,
              99,
              111,
              110,
              115,
              116,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              61,
              32,
              65,
              110,
              121,
              46,
              102,
              114,
              111,
              109,
              74,
              83,
              79,
              78,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              85,
              114,
              108,
              58,
              32,
              39,
              116,
              121,
              112,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              98,
              97,
              115,
              101,
              46,
              118,
              49,
              46,
              66,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              118,
              97,
              108,
              117,
              101,
              58,
              32,
              66,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              46,
              101,
              110,
              99,
              111,
              100,
              101,
              40,
              98,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              41,
              46,
              102,
              105,
              110,
              105,
              115,
              104,
              40,
              41,
              10,
              125,
              41,
              59,
              10,
              10,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              100,
              97,
              116,
              97,
              46,
              119,
              114,
              105,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              116,
              117,
              112,
              108,
              101,
              115,
              58,
              32,
              91,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              111,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              58,
              32,
              91,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              58,
              32,
              34,
              105,
              115,
              95,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              118,
              97,
              108,
              117,
              101,
              58,
              32,
              118,
              97,
              108,
              117,
              101,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              93,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              207,
              6,
              42,
              204,
              6,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              168,
              6,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              157,
              6,
              26,
              154,
              6,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              119,
              114,
              105,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              117,
              112,
              108,
              101,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              101,
              100,
              105,
              116,
              111,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              34,
              58,
              32,
              34,
              105,
              115,
              95,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              116,
              121,
              112,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              98,
              97,
              115,
              101,
              46,
              118,
              49,
              46,
              66,
              111,
              111,
              108,
              101,
              97,
              110,
              86,
              97,
              108,
              117,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              39,
              34,
              34,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              119,
              114,
              105,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** RPC method to write relationships for a tenant. This can be accessed via a POST request to the given HTTP path. It's tagged under "Data" in OpenAPI documentation. */
    writeRelationships: {
      name: "WriteRelationships",
      requestType: RelationshipWriteRequest,
      requestStream: false,
      responseType: RelationshipWriteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              48,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              19,
              119,
              114,
              105,
              116,
              101,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              42,
              19,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              48,
              34,
              43,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              47,
              119,
              114,
              105,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** The ReadRelationships RPC method reads relation tuple(s). */
    readRelationships: {
      name: "ReadRelationships",
      requestType: RelationshipReadRequest,
      requestStream: false,
      responseType: RelationshipReadResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              184,
              11,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              18,
              114,
              101,
              97,
              100,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              42,
              23,
              100,
              97,
              116,
              97,
              46,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              46,
              114,
              101,
              97,
              100,
              106,
              130,
              11,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              240,
              10,
              50,
              237,
              10,
              10,
              166,
              4,
              42,
              163,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              131,
              4,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              248,
              3,
              26,
              245,
              3,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              68,
              97,
              116,
              97,
              46,
              82,
              101,
              97,
              100,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              46,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              46,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              70,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              38,
              118,
              49,
              46,
              84,
              117,
              112,
              108,
              101,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              115,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              49,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              109,
              101,
              109,
              98,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              10,
              132,
              3,
              42,
              129,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              215,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              204,
              2,
              26,
              201,
              2,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              100,
              97,
              116,
              97,
              46,
              114,
              101,
              97,
              100,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              40,
              123,
              10,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              109,
              101,
              109,
              98,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              186,
              3,
              42,
              183,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              147,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              136,
              3,
              26,
              133,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              47,
              114,
              101,
              97,
              100,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              109,
              101,
              109,
              98,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              34,
              47,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              47,
              114,
              101,
              97,
              100,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** The ReadAttributes RPC method reads attribute(s) of a relation. */
    readAttributes: {
      name: "ReadAttributes",
      requestType: AttributeReadRequest,
      requestStream: false,
      responseType: AttributeReadResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              9,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              15,
              114,
              101,
              97,
              100,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              42,
              20,
              100,
              97,
              116,
              97,
              46,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              46,
              114,
              101,
              97,
              100,
              106,
              159,
              9,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              141,
              9,
              50,
              138,
              9,
              10,
              181,
              3,
              42,
              178,
              3,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              146,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              135,
              3,
              26,
              132,
              3,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              68,
              97,
              116,
              97,
              46,
              82,
              101,
              97,
              100,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              46,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              46,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              70,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              38,
              118,
              49,
              46,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              115,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              49,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              203,
              2,
              42,
              200,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              158,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              147,
              2,
              26,
              144,
              2,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              100,
              97,
              116,
              97,
              46,
              114,
              101,
              97,
              100,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              40,
              123,
              10,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              129,
              3,
              42,
              254,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              218,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              207,
              2,
              26,
              204,
              2,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              114,
              101,
              97,
              100,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              34,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              34,
              44,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              114,
              101,
              97,
              100,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** The Delete RPC method deletes a relation tuple. */
    delete: {
      name: "Delete",
      requestType: DataDeleteRequest,
      requestStream: false,
      responseType: DataDeleteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              179,
              11,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              11,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              100,
              97,
              116,
              97,
              42,
              11,
              100,
              97,
              116,
              97,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              106,
              144,
              11,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              254,
              10,
              50,
              251,
              10,
              10,
              143,
              4,
              42,
              140,
              4,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              236,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              225,
              3,
              26,
              222,
              3,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              68,
              97,
              116,
              97,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              68,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              38,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              68,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              110,
              97,
              112,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              84,
              117,
              112,
              108,
              101,
              70,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              38,
              118,
              49,
              46,
              84,
              117,
              112,
              108,
              101,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              38,
              118,
              49,
              46,
              69,
              110,
              116,
              105,
              116,
              121,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              115,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              49,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              97,
              100,
              109,
              105,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              38,
              118,
              49,
              46,
              83,
              117,
              98,
              106,
              101,
              99,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              34,
              49,
              34,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              10,
              148,
              3,
              42,
              145,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              231,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              220,
              2,
              26,
              217,
              2,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              100,
              97,
              116,
              97,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              115,
              110,
              97,
              112,
              95,
              116,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              116,
              117,
              112,
              108,
              101,
              70,
              105,
              108,
              116,
              101,
              114,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              97,
              100,
              109,
              105,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              121,
              112,
              101,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              100,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              207,
              3,
              42,
              204,
              3,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              168,
              3,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              157,
              3,
              26,
              154,
              3,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              34,
              116,
              117,
              112,
              108,
              101,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              97,
              100,
              109,
              105,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              98,
              106,
              101,
              99,
              116,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              49,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              34,
              58,
              32,
              123,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              40,
              34,
              35,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** RPC method to delete relationships for a tenant, accessed via a POST request to the specified path, tagged as "Data" in OpenAPI documentation. */
    deleteRelationships: {
      name: "DeleteRelationships",
      requestType: RelationshipDeleteRequest,
      requestStream: false,
      responseType: RelationshipDeleteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              50,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              20,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              42,
              20,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              34,
              44,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** Executes or runs a specific bundle. This method is useful for processing or triggering actions based on the bundle's data. */
    runBundle: {
      name: "RunBundle",
      requestType: BundleRunRequest,
      requestStream: false,
      responseType: BundleRunResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              177,
              7,
              10,
              4,
              68,
              97,
              116,
              97,
              18,
              10,
              114,
              117,
              110,
              32,
              98,
              117,
              110,
              100,
              108,
              101,
              42,
              10,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              114,
              117,
              110,
              106,
              144,
              7,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              254,
              6,
              50,
              251,
              6,
              10,
              165,
              2,
              42,
              162,
              2,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              130,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              247,
              1,
              26,
              244,
              1,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              68,
              97,
              116,
              97,
              46,
              82,
              117,
              110,
              66,
              117,
              110,
              100,
              108,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              82,
              117,
              110,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              78,
              97,
              109,
              101,
              58,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              65,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              32,
              109,
              97,
              112,
              91,
              115,
              116,
              114,
              105,
              110,
              103,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              34,
              58,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              53,
              54,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              34,
              58,
              32,
              34,
              55,
              56,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              138,
              2,
              42,
              135,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              221,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              210,
              1,
              26,
              207,
              1,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              100,
              97,
              116,
              97,
              46,
              114,
              117,
              110,
              66,
              117,
              110,
              100,
              108,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              110,
              97,
              109,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              58,
              32,
              34,
              53,
              54,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              58,
              32,
              34,
              55,
              56,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              195,
              2,
              42,
              192,
              2,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              156,
              2,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              145,
              2,
              26,
              142,
              2,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              114,
              117,
              110,
              45,
              98,
              117,
              110,
              100,
              108,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              34,
              58,
              32,
              34,
              53,
              54,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              34,
              58,
              32,
              34,
              55,
              56,
              57,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              44,
              34,
              39,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              100,
              97,
              116,
              97,
              47,
              114,
              117,
              110,
              45,
              98,
              117,
              110,
              100,
              108,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataServiceImplementation<CallContextExt = {}> {
  /** The Write RPC method creates a new relation tuple. */
  write(request: DataWriteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataWriteResponse>>;
  /** RPC method to write relationships for a tenant. This can be accessed via a POST request to the given HTTP path. It's tagged under "Data" in OpenAPI documentation. */
  writeRelationships(
    request: RelationshipWriteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RelationshipWriteResponse>>;
  /** The ReadRelationships RPC method reads relation tuple(s). */
  readRelationships(
    request: RelationshipReadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RelationshipReadResponse>>;
  /** The ReadAttributes RPC method reads attribute(s) of a relation. */
  readAttributes(
    request: AttributeReadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributeReadResponse>>;
  /** The Delete RPC method deletes a relation tuple. */
  delete(request: DataDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataDeleteResponse>>;
  /** RPC method to delete relationships for a tenant, accessed via a POST request to the specified path, tagged as "Data" in OpenAPI documentation. */
  deleteRelationships(
    request: RelationshipDeleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RelationshipDeleteResponse>>;
  /** Executes or runs a specific bundle. This method is useful for processing or triggering actions based on the bundle's data. */
  runBundle(request: BundleRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BundleRunResponse>>;
}

export interface DataClient<CallOptionsExt = {}> {
  /** The Write RPC method creates a new relation tuple. */
  write(request: DeepPartial<DataWriteRequest>, options?: CallOptions & CallOptionsExt): Promise<DataWriteResponse>;
  /** RPC method to write relationships for a tenant. This can be accessed via a POST request to the given HTTP path. It's tagged under "Data" in OpenAPI documentation. */
  writeRelationships(
    request: DeepPartial<RelationshipWriteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RelationshipWriteResponse>;
  /** The ReadRelationships RPC method reads relation tuple(s). */
  readRelationships(
    request: DeepPartial<RelationshipReadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RelationshipReadResponse>;
  /** The ReadAttributes RPC method reads attribute(s) of a relation. */
  readAttributes(
    request: DeepPartial<AttributeReadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributeReadResponse>;
  /** The Delete RPC method deletes a relation tuple. */
  delete(request: DeepPartial<DataDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<DataDeleteResponse>;
  /** RPC method to delete relationships for a tenant, accessed via a POST request to the specified path, tagged as "Data" in OpenAPI documentation. */
  deleteRelationships(
    request: DeepPartial<RelationshipDeleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RelationshipDeleteResponse>;
  /** Executes or runs a specific bundle. This method is useful for processing or triggering actions based on the bundle's data. */
  runBundle(request: DeepPartial<BundleRunRequest>, options?: CallOptions & CallOptionsExt): Promise<BundleRunResponse>;
}

export type BundleDefinition = typeof BundleDefinition;
export const BundleDefinition = {
  name: "Bundle",
  fullName: "base.v1.Bundle",
  methods: {
    /** Writes a bundle of data for a specific operation. This is a general purpose method to handle writing data bundles. */
    write: {
      name: "Write",
      requestType: BundleWriteRequest,
      requestStream: false,
      responseType: BundleWriteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              136,
              20,
              10,
              6,
              66,
              117,
              110,
              100,
              108,
              101,
              18,
              12,
              119,
              114,
              105,
              116,
              101,
              32,
              98,
              117,
              110,
              100,
              108,
              101,
              42,
              12,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              119,
              114,
              105,
              116,
              101,
              106,
              225,
              19,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              207,
              19,
              50,
              204,
              19,
              10,
              211,
              6,
              42,
              208,
              6,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              176,
              6,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              165,
              6,
              26,
              162,
              6,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              87,
              114,
              105,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              87,
              114,
              105,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              66,
              117,
              110,
              100,
              108,
              101,
              115,
              58,
              32,
              91,
              93,
              42,
              118,
              49,
              46,
              68,
              97,
              116,
              97,
              66,
              117,
              110,
              100,
              108,
              101,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              78,
              97,
              109,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              32,
              91,
              93,
              42,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              87,
              114,
              105,
              116,
              101,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              97,
              100,
              109,
              105,
              110,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              87,
              114,
              105,
              116,
              101,
              58,
              32,
              91,
              93,
              115,
              116,
              114,
              105,
              110,
              103,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              36,
              112,
              117,
              98,
              108,
              105,
              99,
              124,
              98,
              111,
              111,
              108,
              101,
              97,
              110,
              58,
              102,
              97,
              108,
              115,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              125,
              41,
              10,
              155,
              6,
              42,
              152,
              6,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              238,
              5,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              227,
              5,
              26,
              224,
              5,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              119,
              114,
              105,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              98,
              117,
              110,
              100,
              108,
              101,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              110,
              97,
              109,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              95,
              119,
              114,
              105,
              116,
              101,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              97,
              100,
              109,
              105,
              110,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              119,
              114,
              105,
              116,
              101,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              36,
              112,
              117,
              98,
              108,
              105,
              99,
              124,
              98,
              111,
              111,
              108,
              101,
              97,
              110,
              58,
              102,
              97,
              108,
              115,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              213,
              6,
              42,
              210,
              6,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              174,
              6,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              163,
              6,
              26,
              160,
              6,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              119,
              114,
              105,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              117,
              110,
              100,
              108,
              101,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              104,
              105,
              112,
              115,
              95,
              119,
              114,
              105,
              116,
              101,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              97,
              100,
              109,
              105,
              110,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              35,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
              64,
              117,
              115,
              101,
              114,
              58,
              123,
              123,
              46,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              73,
              68,
              125,
              125,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              119,
              114,
              105,
              116,
              101,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              58,
              123,
              123,
              46,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              68,
              125,
              125,
              36,
              112,
              117,
              98,
              108,
              105,
              99,
              124,
              98,
              111,
              111,
              108,
              101,
              97,
              110,
              58,
              102,
              97,
              108,
              115,
              101,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              41,
              34,
              36,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              119,
              114,
              105,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** Reads a data bundle based on a specified request. This method is tailored for retrieving data bundles. */
    read: {
      name: "Read",
      requestType: BundleReadRequest,
      requestStream: false,
      responseType: BundleReadResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              153,
              5,
              10,
              6,
              66,
              117,
              110,
              100,
              108,
              101,
              18,
              11,
              114,
              101,
              97,
              100,
              32,
              98,
              117,
              110,
              100,
              108,
              101,
              42,
              11,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              114,
              101,
              97,
              100,
              106,
              244,
              4,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              226,
              4,
              50,
              223,
              4,
              10,
              184,
              1,
              42,
              181,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              149,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              138,
              1,
              26,
              135,
              1,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              82,
              101,
              97,
              100,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              82,
              101,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              78,
              97,
              109,
              101,
              58,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              125,
              41,
              10,
              181,
              1,
              42,
              178,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              136,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              126,
              26,
              124,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              114,
              101,
              97,
              100,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              110,
              97,
              109,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              233,
              1,
              42,
              230,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              194,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              183,
              1,
              26,
              180,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              114,
              101,
              97,
              100,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              40,
              34,
              35,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              114,
              101,
              97,
              100,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /** Deletes a specific data bundle. This method is used to remove existing bundles from the system. */
    delete: {
      name: "Delete",
      requestType: BundleDeleteRequest,
      requestStream: false,
      responseType: BundleDeleteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              166,
              5,
              10,
              6,
              66,
              117,
              110,
              100,
              108,
              101,
              18,
              13,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              98,
              117,
              110,
              100,
              108,
              101,
              42,
              13,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              106,
              253,
              4,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              235,
              4,
              50,
              232,
              4,
              10,
              188,
              1,
              42,
              185,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              153,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              142,
              1,
              26,
              139,
              1,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              66,
              117,
              110,
              100,
              108,
              101,
              68,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              84,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              78,
              97,
              109,
              101,
              58,
              32,
              32,
              32,
              32,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              125,
              41,
              10,
              184,
              1,
              42,
              181,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              139,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              128,
              1,
              26,
              126,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              58,
              32,
              34,
              116,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              110,
              97,
              109,
              101,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              44,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              235,
              1,
              42,
              232,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              196,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              185,
              1,
              26,
              182,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              42,
              34,
              37,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              123,
              116,
              101,
              110,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              98,
              117,
              110,
              100,
              108,
              101,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BundleServiceImplementation<CallContextExt = {}> {
  /** Writes a bundle of data for a specific operation. This is a general purpose method to handle writing data bundles. */
  write(request: BundleWriteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BundleWriteResponse>>;
  /** Reads a data bundle based on a specified request. This method is tailored for retrieving data bundles. */
  read(request: BundleReadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BundleReadResponse>>;
  /** Deletes a specific data bundle. This method is used to remove existing bundles from the system. */
  delete(
    request: BundleDeleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BundleDeleteResponse>>;
}

export interface BundleClient<CallOptionsExt = {}> {
  /** Writes a bundle of data for a specific operation. This is a general purpose method to handle writing data bundles. */
  write(request: DeepPartial<BundleWriteRequest>, options?: CallOptions & CallOptionsExt): Promise<BundleWriteResponse>;
  /** Reads a data bundle based on a specified request. This method is tailored for retrieving data bundles. */
  read(request: DeepPartial<BundleReadRequest>, options?: CallOptions & CallOptionsExt): Promise<BundleReadResponse>;
  /** Deletes a specific data bundle. This method is used to remove existing bundles from the system. */
  delete(
    request: DeepPartial<BundleDeleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BundleDeleteResponse>;
}

export type TenancyDefinition = typeof TenancyDefinition;
export const TenancyDefinition = {
  name: "Tenancy",
  fullName: "base.v1.Tenancy",
  methods: {
    /**
     * Create is a unary RPC to create a new tenant.
     * It requires a TenantCreateRequest and returns a TenantCreateResponse.
     */
    create: {
      name: "Create",
      requestType: TenantCreateRequest,
      requestStream: false,
      responseType: TenantCreateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              213,
              4,
              10,
              7,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              18,
              13,
              99,
              114,
              101,
              97,
              116,
              101,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              42,
              14,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              46,
              99,
              114,
              101,
              97,
              116,
              101,
              106,
              170,
              4,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              152,
              4,
              50,
              149,
              4,
              10,
              155,
              1,
              42,
              152,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              121,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              111,
              26,
              109,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              84,
              101,
              110,
              97,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              32,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              78,
              97,
              109,
              101,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              10,
              152,
              1,
              42,
              149,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              108,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              98,
              26,
              96,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              116,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              99,
              114,
              101,
              97,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              110,
              97,
              109,
              101,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              217,
              1,
              42,
              214,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              178,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              167,
              1,
              26,
              164,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              23,
              34,
              18,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Delete is a unary RPC to delete an existing tenant.
     * It requires a TenantDeleteRequest and returns a TenantDeleteResponse.
     */
    delete: {
      name: "Delete",
      requestType: TenantDeleteRequest,
      requestStream: false,
      responseType: TenantDeleteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              214,
              3,
              10,
              7,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              18,
              13,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              42,
              14,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              106,
              171,
              3,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              153,
              3,
              50,
              150,
              3,
              10,
              139,
              1,
              42,
              136,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              105,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              95,
              26,
              93,
              114,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              84,
              101,
              110,
              97,
              110,
              116,
              68,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              73,
              100,
              58,
              32,
              34,
              34,
              10,
              125,
              41,
              10,
              140,
              1,
              42,
              137,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              96,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              86,
              26,
              84,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              116,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              105,
              100,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              46,
              116,
              104,
              101,
              110,
              40,
              40,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              41,
              32,
              61,
              62,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              47,
              47,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              10,
              125,
              41,
              10,
              119,
              42,
              117,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              82,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              72,
              26,
              70,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              68,
              69,
              76,
              69,
              84,
              69,
              32,
              39,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              116,
              49,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([18, 42, 16, 47, 118, 49, 47, 116, 101, 110, 97, 110, 116, 115, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    /**
     * List is a unary RPC to get a list of all tenants.
     * It requires a TenantListRequest and returns a TenantListResponse.
     */
    list: {
      name: "List",
      requestType: TenantListRequest,
      requestStream: false,
      responseType: TenantListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              214,
              4,
              10,
              7,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              18,
              12,
              108,
              105,
              115,
              116,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              42,
              12,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              46,
              108,
              105,
              115,
              116,
              106,
              174,
              4,
              10,
              13,
              120,
              45,
              99,
              111,
              100,
              101,
              83,
              97,
              109,
              112,
              108,
              101,
              115,
              18,
              156,
              4,
              50,
              153,
              4,
              10,
              168,
              1,
              42,
              165,
              1,
              10,
              13,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              12,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              4,
              26,
              2,
              103,
              111,
              10,
              133,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              123,
              26,
              121,
              99,
              114,
              44,
              32,
              101,
              114,
              114,
              32,
              58,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              84,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              76,
              105,
              115,
              116,
              40,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              40,
              41,
              44,
              32,
              38,
              118,
              49,
              46,
              84,
              101,
              110,
              97,
              110,
              116,
              76,
              105,
              115,
              116,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              123,
              10,
              32,
              32,
              32,
              32,
              80,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              67,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              133,
              1,
              42,
              130,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              110,
              111,
              100,
              101,
              10,
              20,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              12,
              26,
              10,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              10,
              89,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              79,
              26,
              77,
              108,
              101,
              116,
              32,
              114,
              101,
              115,
              32,
              61,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              116,
              101,
              110,
              97,
              110,
              99,
              121,
              46,
              108,
              105,
              115,
              116,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              84,
              111,
              107,
              101,
              110,
              58,
              32,
              34,
              34,
              44,
              10,
              125,
              41,
              10,
              227,
              1,
              42,
              224,
              1,
              10,
              15,
              10,
              5,
              108,
              97,
              98,
              101,
              108,
              18,
              6,
              26,
              4,
              99,
              85,
              82,
              76,
              10,
              14,
              10,
              4,
              108,
              97,
              110,
              103,
              18,
              6,
              26,
              4,
              99,
              117,
              114,
              108,
              10,
              188,
              1,
              10,
              6,
              115,
              111,
              117,
              114,
              99,
              101,
              18,
              177,
              1,
              26,
              174,
              1,
              99,
              117,
              114,
              108,
              32,
              45,
              45,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              45,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              39,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              51,
              52,
              55,
              54,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              108,
              105,
              115,
              116,
              39,
              32,
              92,
              10,
              45,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              39,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              84,
              121,
              112,
              101,
              58,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              39,
              32,
              92,
              10,
              45,
              45,
              100,
              97,
              116,
              97,
              45,
              114,
              97,
              119,
              32,
              39,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              97,
              103,
              101,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              32,
              50,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              105,
              110,
              117,
              111,
              117,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              34,
              10,
              125,
              39,
            ]),
          ],
          578365826: [
            Buffer.from([
              21,
              34,
              16,
              47,
              118,
              49,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              108,
              105,
              115,
              116,
              58,
              1,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TenancyServiceImplementation<CallContextExt = {}> {
  /**
   * Create is a unary RPC to create a new tenant.
   * It requires a TenantCreateRequest and returns a TenantCreateResponse.
   */
  create(
    request: TenantCreateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TenantCreateResponse>>;
  /**
   * Delete is a unary RPC to delete an existing tenant.
   * It requires a TenantDeleteRequest and returns a TenantDeleteResponse.
   */
  delete(
    request: TenantDeleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TenantDeleteResponse>>;
  /**
   * List is a unary RPC to get a list of all tenants.
   * It requires a TenantListRequest and returns a TenantListResponse.
   */
  list(request: TenantListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TenantListResponse>>;
}

export interface TenancyClient<CallOptionsExt = {}> {
  /**
   * Create is a unary RPC to create a new tenant.
   * It requires a TenantCreateRequest and returns a TenantCreateResponse.
   */
  create(
    request: DeepPartial<TenantCreateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TenantCreateResponse>;
  /**
   * Delete is a unary RPC to delete an existing tenant.
   * It requires a TenantDeleteRequest and returns a TenantDeleteResponse.
   */
  delete(
    request: DeepPartial<TenantDeleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TenantDeleteResponse>;
  /**
   * List is a unary RPC to get a list of all tenants.
   * It requires a TenantListRequest and returns a TenantListResponse.
   */
  list(request: DeepPartial<TenantListRequest>, options?: CallOptions & CallOptionsExt): Promise<TenantListResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
